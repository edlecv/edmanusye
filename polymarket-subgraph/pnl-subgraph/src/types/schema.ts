// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class UserPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserPosition | null {
    return changetype<UserPosition | null>(
      store.get_in_block("UserPosition", id),
    );
  }

  static load(id: string): UserPosition | null {
    return changetype<UserPosition | null>(store.get("UserPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get avgPrice(): BigInt {
    let value = this.get("avgPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgPrice(value: BigInt) {
    this.set("avgPrice", Value.fromBigInt(value));
  }

  get realizedPnl(): BigInt {
    let value = this.get("realizedPnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set realizedPnl(value: BigInt) {
    this.set("realizedPnl", Value.fromBigInt(value));
  }

  get totalBought(): BigInt {
    let value = this.get("totalBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBought(value: BigInt) {
    this.set("totalBought", Value.fromBigInt(value));
  }
}

export class NegRiskEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NegRiskEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NegRiskEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NegRiskEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NegRiskEvent | null {
    return changetype<NegRiskEvent | null>(
      store.get_in_block("NegRiskEvent", id),
    );
  }

  static load(id: string): NegRiskEvent | null {
    return changetype<NegRiskEvent | null>(store.get("NegRiskEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questionCount(): i32 {
    let value = this.get("questionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set questionCount(value: i32) {
    this.set("questionCount", Value.fromI32(value));
  }
}

export class Condition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Condition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Condition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Condition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Condition | null {
    return changetype<Condition | null>(store.get_in_block("Condition", id));
  }

  static load(id: string): Condition | null {
    return changetype<Condition | null>(store.get("Condition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positionIds(): Array<BigInt> {
    let value = this.get("positionIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set positionIds(value: Array<BigInt>) {
    this.set("positionIds", Value.fromBigIntArray(value));
  }

  get payoutNumerators(): Array<BigInt> {
    let value = this.get("payoutNumerators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set payoutNumerators(value: Array<BigInt>) {
    this.set("payoutNumerators", Value.fromBigIntArray(value));
  }

  get payoutDenominator(): BigInt {
    let value = this.get("payoutDenominator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutDenominator(value: BigInt) {
    this.set("payoutDenominator", Value.fromBigInt(value));
  }
}

export class FPMM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FPMM entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FPMM must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FPMM", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FPMM | null {
    return changetype<FPMM | null>(store.get_in_block("FPMM", id));
  }

  static load(id: string): FPMM | null {
    return changetype<FPMM | null>(store.get("FPMM", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conditionId(): string {
    let value = this.get("conditionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set conditionId(value: string) {
    this.set("conditionId", Value.fromString(value));
  }
}
