// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Condition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Condition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Condition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Condition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Condition | null {
    return changetype<Condition | null>(store.get_in_block("Condition", id));
  }

  static load(id: string): Condition | null {
    return changetype<Condition | null>(store.get("Condition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get_in_block("Collateral", id));
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get("Collateral", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class FixedProductMarketMaker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FixedProductMarketMaker entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FixedProductMarketMaker must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FixedProductMarketMaker", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FixedProductMarketMaker | null {
    return changetype<FixedProductMarketMaker | null>(
      store.get_in_block("FixedProductMarketMaker", id),
    );
  }

  static load(id: string): FixedProductMarketMaker | null {
    return changetype<FixedProductMarketMaker | null>(
      store.get("FixedProductMarketMaker", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get creationTransactionHash(): Bytes {
    let value = this.get("creationTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creationTransactionHash(value: Bytes) {
    this.set("creationTransactionHash", Value.fromBytes(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get conditionalTokenAddress(): string {
    let value = this.get("conditionalTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set conditionalTokenAddress(value: string) {
    this.set("conditionalTokenAddress", Value.fromString(value));
  }

  get conditions(): Array<string> {
    let value = this.get("conditions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set conditions(value: Array<string>) {
    this.set("conditions", Value.fromStringArray(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get tradesQuantity(): BigInt {
    let value = this.get("tradesQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradesQuantity(value: BigInt) {
    this.set("tradesQuantity", Value.fromBigInt(value));
  }

  get buysQuantity(): BigInt {
    let value = this.get("buysQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set buysQuantity(value: BigInt) {
    this.set("buysQuantity", Value.fromBigInt(value));
  }

  get sellsQuantity(): BigInt {
    let value = this.get("sellsQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sellsQuantity(value: BigInt) {
    this.set("sellsQuantity", Value.fromBigInt(value));
  }

  get liquidityAddQuantity(): BigInt {
    let value = this.get("liquidityAddQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityAddQuantity(value: BigInt) {
    this.set("liquidityAddQuantity", Value.fromBigInt(value));
  }

  get liquidityRemoveQuantity(): BigInt {
    let value = this.get("liquidityRemoveQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityRemoveQuantity(value: BigInt) {
    this.set("liquidityRemoveQuantity", Value.fromBigInt(value));
  }

  get collateralVolume(): BigInt {
    let value = this.get("collateralVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralVolume(value: BigInt) {
    this.set("collateralVolume", Value.fromBigInt(value));
  }

  get scaledCollateralVolume(): BigDecimal {
    let value = this.get("scaledCollateralVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scaledCollateralVolume(value: BigDecimal) {
    this.set("scaledCollateralVolume", Value.fromBigDecimal(value));
  }

  get collateralBuyVolume(): BigInt {
    let value = this.get("collateralBuyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralBuyVolume(value: BigInt) {
    this.set("collateralBuyVolume", Value.fromBigInt(value));
  }

  get scaledCollateralBuyVolume(): BigDecimal {
    let value = this.get("scaledCollateralBuyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scaledCollateralBuyVolume(value: BigDecimal) {
    this.set("scaledCollateralBuyVolume", Value.fromBigDecimal(value));
  }

  get collateralSellVolume(): BigInt {
    let value = this.get("collateralSellVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralSellVolume(value: BigInt) {
    this.set("collateralSellVolume", Value.fromBigInt(value));
  }

  get scaledCollateralSellVolume(): BigDecimal {
    let value = this.get("scaledCollateralSellVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scaledCollateralSellVolume(value: BigDecimal) {
    this.set("scaledCollateralSellVolume", Value.fromBigDecimal(value));
  }

  get feeVolume(): BigInt {
    let value = this.get("feeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeVolume(value: BigInt) {
    this.set("feeVolume", Value.fromBigInt(value));
  }

  get scaledFeeVolume(): BigDecimal {
    let value = this.get("scaledFeeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scaledFeeVolume(value: BigDecimal) {
    this.set("scaledFeeVolume", Value.fromBigDecimal(value));
  }

  get liquidityParameter(): BigInt {
    let value = this.get("liquidityParameter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityParameter(value: BigInt) {
    this.set("liquidityParameter", Value.fromBigInt(value));
  }

  get scaledLiquidityParameter(): BigDecimal {
    let value = this.get("scaledLiquidityParameter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scaledLiquidityParameter(value: BigDecimal) {
    this.set("scaledLiquidityParameter", Value.fromBigDecimal(value));
  }

  get outcomeTokenAmounts(): Array<BigInt> {
    let value = this.get("outcomeTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set outcomeTokenAmounts(value: Array<BigInt>) {
    this.set("outcomeTokenAmounts", Value.fromBigIntArray(value));
  }

  get outcomeTokenPrices(): Array<BigDecimal> {
    let value = this.get("outcomeTokenPrices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set outcomeTokenPrices(value: Array<BigDecimal>) {
    this.set("outcomeTokenPrices", Value.fromBigDecimalArray(value));
  }

  get outcomeSlotCount(): i32 {
    let value = this.get("outcomeSlotCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set outcomeSlotCount(value: i32) {
    this.set("outcomeSlotCount", Value.fromI32(value));
  }

  get lastActiveDay(): BigInt {
    let value = this.get("lastActiveDay");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActiveDay(value: BigInt) {
    this.set("lastActiveDay", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get poolMembers(): FpmmPoolMembershipLoader {
    return new FpmmPoolMembershipLoader(
      "FixedProductMarketMaker",
      this.get("id")!.toString(),
      "poolMembers",
    );
  }
}

export class FpmmFundingAddition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FpmmFundingAddition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FpmmFundingAddition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FpmmFundingAddition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FpmmFundingAddition | null {
    return changetype<FpmmFundingAddition | null>(
      store.get_in_block("FpmmFundingAddition", id),
    );
  }

  static load(id: string): FpmmFundingAddition | null {
    return changetype<FpmmFundingAddition | null>(
      store.get("FpmmFundingAddition", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get fpmm(): string {
    let value = this.get("fpmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fpmm(value: string) {
    this.set("fpmm", Value.fromString(value));
  }

  get funder(): string {
    let value = this.get("funder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set funder(value: string) {
    this.set("funder", Value.fromString(value));
  }

  get amountsAdded(): Array<BigInt> {
    let value = this.get("amountsAdded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set amountsAdded(value: Array<BigInt>) {
    this.set("amountsAdded", Value.fromBigIntArray(value));
  }

  get amountsRefunded(): Array<BigInt> {
    let value = this.get("amountsRefunded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set amountsRefunded(value: Array<BigInt>) {
    this.set("amountsRefunded", Value.fromBigIntArray(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }
}

export class FpmmFundingRemoval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FpmmFundingRemoval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FpmmFundingRemoval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FpmmFundingRemoval", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FpmmFundingRemoval | null {
    return changetype<FpmmFundingRemoval | null>(
      store.get_in_block("FpmmFundingRemoval", id),
    );
  }

  static load(id: string): FpmmFundingRemoval | null {
    return changetype<FpmmFundingRemoval | null>(
      store.get("FpmmFundingRemoval", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get fpmm(): string {
    let value = this.get("fpmm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fpmm(value: string) {
    this.set("fpmm", Value.fromString(value));
  }

  get funder(): string {
    let value = this.get("funder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set funder(value: string) {
    this.set("funder", Value.fromString(value));
  }

  get amountsRemoved(): Array<BigInt> {
    let value = this.get("amountsRemoved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set amountsRemoved(value: Array<BigInt>) {
    this.set("amountsRemoved", Value.fromBigIntArray(value));
  }

  get collateralRemoved(): BigInt {
    let value = this.get("collateralRemoved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralRemoved(value: BigInt) {
    this.set("collateralRemoved", Value.fromBigInt(value));
  }

  get sharesBurnt(): BigInt {
    let value = this.get("sharesBurnt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharesBurnt(value: BigInt) {
    this.set("sharesBurnt", Value.fromBigInt(value));
  }
}

export class FpmmTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FpmmTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FpmmTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FpmmTransaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FpmmTransaction | null {
    return changetype<FpmmTransaction | null>(
      store.get_in_block("FpmmTransaction", id),
    );
  }

  static load(id: string): FpmmTransaction | null {
    return changetype<FpmmTransaction | null>(store.get("FpmmTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tradeAmount(): BigInt {
    let value = this.get("tradeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradeAmount(value: BigInt) {
    this.set("tradeAmount", Value.fromBigInt(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get outcomeIndex(): BigInt {
    let value = this.get("outcomeIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outcomeIndex(value: BigInt) {
    this.set("outcomeIndex", Value.fromBigInt(value));
  }

  get outcomeTokensAmount(): BigInt {
    let value = this.get("outcomeTokensAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outcomeTokensAmount(value: BigInt) {
    this.set("outcomeTokensAmount", Value.fromBigInt(value));
  }
}

export class FpmmPoolMembership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FpmmPoolMembership entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FpmmPoolMembership must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FpmmPoolMembership", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FpmmPoolMembership | null {
    return changetype<FpmmPoolMembership | null>(
      store.get_in_block("FpmmPoolMembership", id),
    );
  }

  static load(id: string): FpmmPoolMembership | null {
    return changetype<FpmmPoolMembership | null>(
      store.get("FpmmPoolMembership", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get funder(): string {
    let value = this.get("funder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set funder(value: string) {
    this.set("funder", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class FpmmPoolMembershipLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FpmmPoolMembership[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FpmmPoolMembership[]>(value);
  }
}
