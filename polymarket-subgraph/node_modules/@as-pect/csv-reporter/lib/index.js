import { stringify } from "csv-stringify";
import { createWriteStream } from "fs";
import { basename, extname, dirname, join } from "path";
/**
 * This is a list of all the columns in the exported csv file.
 */
const csvColumns = [
    "Group",
    "Name",
    "Ran",
    "Negated",
    "Pass",
    "Runtime",
    "Message",
    "Actual",
    "Expected",
];
/**
 * This class is responsible for creating a csv file located at {testName}.spec.csv. It will
 * contain a set of tests with relevant pass and fail information.
 */
export default class CSVReporter {
    stdout = null;
    stderr = null;
    output = null;
    fileName = null;
    onEnter(ctx) {
        this.output = stringify({ columns: csvColumns });
        const extension = extname(ctx.fileName);
        const dir = dirname(ctx.fileName);
        const base = basename(ctx.fileName, extension);
        const outPath = join(process.cwd(), dir, base + ".csv");
        this.fileName = createWriteStream(outPath, "utf8");
        this.output.pipe(this.fileName);
        this.output.write(csvColumns);
    }
    onExit(_ctx, node) {
        if (node.type === 1 /* TestNodeType.Group */) {
            this.onGroupFinish(node);
        }
    }
    onFinish() {
        this.output.end();
    }
    onGroupFinish(group) {
        if (group.children.length === 0)
            return;
        group.groupTests.forEach((test) => this.onTestFinish(group, test));
        group.groupTodos.forEach((desc) => this.onTodo(group, desc));
    }
    onTestFinish(group, test) {
        this.output.write([
            group.name,
            test.ran ? "RAN" : "NOT RUN",
            test.name,
            test.negated ? "TRUE" : "FALSE",
            test.pass ? "PASS" : "FAIL",
            test.deltaT.toString(),
            test.message,
            test.actual ? test.actual.stringify({ indent: 0 }) : "",
            test.expected
                ? `${test.negated ? "Not " : ""}${test.expected.stringify({
                    indent: 0,
                })}`
                : "",
        ]);
    }
    onTodo(group, desc) {
        this.output.write([group.name, "TODO", desc, "", "", "", "", "", ""]);
    }
}
;
//# sourceMappingURL=index.js.map