import { createWriteStream } from "fs";
import { basename, extname, dirname, join } from "path";
/**
 * This class reports all relevant test statistics to a JSON file located at
 * `{testLocation}.spec.json`.
 */
export default class JSONReporter {
    stdout = null;
    stderr = null;
    file = null;
    first = true;
    onEnter(ctx) {
        const extension = extname(ctx.fileName);
        const dir = dirname(ctx.fileName);
        const base = basename(ctx.fileName, extension);
        const outPath = join(process.cwd(), dir, base + ".json");
        this.file = createWriteStream(outPath, "utf8");
        this.file.write("[");
        this.first = true;
    }
    onExit(_ctx, node) {
        if (node.type === 1 /* TestNodeType.Group */) {
            this.onGroupFinish(node);
        }
    }
    onFinish(_ctx) {
        this.file.end();
    }
    onGroupFinish(group) {
        if (group.children.length === 0)
            return;
        group.groupTests.forEach((test) => this.onTestFinish(group, test));
        group.groupTodos.forEach((desc) => this.onTodo(group, desc));
    }
    onTestFinish(group, test) {
        this.file.write((this.first ? "\n" : ",\n") +
            JSON.stringify({
                group: group.name,
                name: test.name,
                ran: test.ran,
                pass: test.pass,
                negated: test.negated,
                runtime: test.deltaT,
                message: test.message,
                actual: test.actual ? test.actual.stringify({ indent: 0 }) : null,
                expected: test.expected
                    ? `${test.negated ? "Not " : ""}${test.expected.stringify({
                        indent: 0,
                    })}`
                    : null,
            }));
        this.first = false;
    }
    onTodo(group, desc) {
        this.file.write((this.first ? "\n" : ",\n") +
            JSON.stringify({
                group: group.name,
                name: "TODO: " + desc,
                ran: false,
                pass: null,
                negated: false,
                runtime: 0,
                message: "",
                actual: null,
                expected: null,
            }));
        this.first = false;
    }
}
;
//# sourceMappingURL=index.js.map