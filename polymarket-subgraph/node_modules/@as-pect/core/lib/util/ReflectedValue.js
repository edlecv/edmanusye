import { stringifyReflectedValue } from "./stringifyReflectedValue.js";
/**
 * A JavaScript object that represents a reflected value from the as-pect testing
 * module.
 */
export class ReflectedValue {
    /** An indicator if the reflected object was managed by the runtime. */
    isManaged = false;
    /** An indicator if the reflected object was null. */
    isNull = false;
    /** A set of keys for Maps or Classes in the reflected object. */
    keys = null;
    /** Used to indicate if an expected assertion value was negated. */
    negated = false;
    /** An indicator wether the reflected object was in a nullable context. */
    nullable = false;
    /** The size of the heap allocation for a given class. */
    offset = 0;
    /** The pointer to the value in the module. */
    pointer = 0;
    /** An indicator if a number was signed. */
    signed = false;
    /** The size of an array, or the byte size of a number. */
    size = 0;
    /** A stack trace for the given value. */
    stack = "";
    /** The reflected value type. */
    type = 0 /* ReflectedValueType.None */;
    /** The runtime class id for the reflected reflected value. */
    typeId = 0;
    /** The name of the class for a given reflected reflected value. */
    typeName = null;
    /** A string or number representing the reflected value. */
    value = 0;
    /** A set of values that are contained in a given reflected Set, Map, or Class object. */
    values = null;
    /**
     * Stringify the ReflectedValue with custom formatting.
     *
     * @param {Partial<StringifyReflectedValueProps>} props - The stringify configuration
     */
    stringify(props = {}) {
        return stringifyReflectedValue(this, props);
    }
}
//# sourceMappingURL=ReflectedValue.js.map