{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/.nvm/versions/node/v22.13.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import{Button}from\"./ui/button\";import{Input}from\"./ui/input\";// Removed Card import for main container, will use divs and Tailwind classes for styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StrategyAnalyzer=()=>{const initialConfig={initialBalance:1000,winRate:0.55,riskRatio:1,rounds:1000,baseBet:10,rawBaseBet:10,maxBetPercent:100,maxBetSize:1000,consecutiveLossesForDouble:3,consecutiveWinsForDouble:3};const[config,setConfig]=useState(initialConfig);const[simulationResults,setSimulationResults]=useState(null);const[chartData,setChartData]=useState([]);const[expectancy,setExpectancy]=useState(0);const chartRef=useRef(null);useEffect(()=>{const winRate=parseFloat(config.winRate);const riskRatio=parseFloat(config.riskRatio);const calculatedExpectancy=winRate*riskRatio-(1-winRate);setExpectancy(calculatedExpectancy);},[config.winRate,config.riskRatio]);const handleInputChange=e=>{const{name,value,type}=e.target;setConfig(prevConfig=>_objectSpread(_objectSpread({},prevConfig),{},{[name]:type==='number'?parseFloat(value):value}));};const runSingleStrategy=(currentConfig,strategyType)=>{let balance=currentConfig.initialBalance;let currentBetValue=currentConfig.baseBet;if(strategyType==='raw'){currentBetValue=currentConfig.rawBaseBet;}let consecutiveWinLoss=0;const history=[];let maxDrawdown=0;let peakBalance=currentConfig.initialBalance;let wins=0;let losses=0;let maxBetUsed=0;for(let i=0;i<currentConfig.rounds;i++){if(balance<=0)break;let actualBet=currentBetValue;if(strategyType!=='raw'){actualBet=Math.min(currentBetValue,balance*(currentConfig.maxBetPercent/100),currentConfig.maxBetSize);if(balance<actualBet)actualBet=balance;}if(actualBet<=0)actualBet=1;maxBetUsed=Math.max(maxBetUsed,actualBet);const isWin=Math.random()<currentConfig.winRate;if(isWin){balance+=actualBet*currentConfig.riskRatio;wins++;if(strategyType==='martingale'||strategyType==='linear'||strategyType==='smartDouble'){consecutiveWinLoss=0;currentBetValue=currentConfig.baseBet;}if(strategyType==='antiMartingale')currentBetValue*=2;if(strategyType==='antiLinear')currentBetValue+=currentConfig.baseBet;if(strategyType==='antiSmartDouble'){consecutiveWinLoss++;if(consecutiveWinLoss>=currentConfig.consecutiveWinsForDouble){currentBetValue=currentConfig.baseBet*2;}else{currentBetValue=currentConfig.baseBet;}}}else{balance-=actualBet;losses++;if(strategyType==='antiMartingale'||strategyType==='antiLinear'||strategyType==='antiSmartDouble'){consecutiveWinLoss=0;currentBetValue=currentConfig.baseBet;}if(strategyType==='martingale')currentBetValue*=2;if(strategyType==='linear')currentBetValue+=currentConfig.baseBet;if(strategyType==='smartDouble'){consecutiveWinLoss++;if(consecutiveWinLoss>=currentConfig.consecutiveLossesForDouble){currentBetValue=currentConfig.baseBet*2;}else{currentBetValue=currentConfig.baseBet;}}}if(strategyType!=='raw'){currentBetValue=Math.max(1,currentBetValue);}peakBalance=Math.max(peakBalance,balance);const drawdown=peakBalance-balance;maxDrawdown=Math.max(maxDrawdown,drawdown);history.push({round:i+1,balance});}return{history,finalBalance:balance,maxDrawdown,wins,losses,tradesCount:wins+losses,maxBetUsed};};const runSimulations=()=>{const strategies=[{name:'Raw',type:'raw',color:'#10b981'},// Green\n{name:'Martingale',type:'martingale',color:'#9333ea'},// Purple\n{name:'Anti-Martingale',type:'antiMartingale',color:'#2563eb'},// Blue\n{name:'Linear',type:'linear',color:'#eab308'},// Yellow/Gold\n{name:'Anti-Linear',type:'antiLinear',color:'#dc2626'},// Red\n{name:'Smart Double',type:'smartDouble',color:'#ff6b00'},// Orange\n{name:'Anti-Smart Double',type:'antiSmartDouble',color:'#FF1493'}// Deep Pink\n];let allResults={};let tempChartData=[];strategies.forEach(strategy=>{const result=runSingleStrategy(config,strategy.type);allResults[strategy.type]=_objectSpread(_objectSpread({},result),{},{name:strategy.name,color:strategy.color,type:strategy.type});});const numRounds=config.rounds;for(let i=0;i<numRounds;i++){let roundData={round:i+1};let active=false;strategies.forEach(strategy=>{if(allResults[strategy.type].history[i]){roundData[strategy.type]=allResults[strategy.type].history[i].balance;active=true;}else{const lastHistoryEntry=allResults[strategy.type].history[allResults[strategy.type].history.length-1];roundData[strategy.type]=lastHistoryEntry?lastHistoryEntry.balance:null;}});if(active)tempChartData.push(roundData);else break;}const sampleRate=Math.max(1,Math.floor(tempChartData.length/500));const sampledChartData=tempChartData.filter((_,i)=>i%sampleRate===0);setChartData(sampledChartData);setSimulationResults(allResults);};const formatNumber=function(num){let digits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;if(typeof num!=='number'||isNaN(num))return'N/A';return num.toLocaleString(undefined,{minimumFractionDigits:digits,maximumFractionDigits:digits});};const yAxisTickFormatter=value=>\"$\".concat(formatNumber(value,0));const tooltipFormatter=(value,name)=>{// Ensure simulationResults is not null and the specific strategy result exists\nconst strategyName=simulationResults&&simulationResults[name]?simulationResults[name].name:name.replace(/([A-Z])/g,' $1').replace(/^./,str=>str.toUpperCase());return[\"$\".concat(formatNumber(value)),strategyName];};return(/*#__PURE__*/// Removed main Card component, using div with Tailwind classes for styling\n_jsxs(\"div\",{className:\"p-6 bg-white rounded-lg shadow-lg mb-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-semibold mb-2 text-gray-700\",children:\"Strategy Configuration\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 mb-6 bg-blue-50 rounded-md\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-blue-700\",children:\"Base Setup Expectancy: \"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm font-bold \".concat(expectancy>0?'text-green-600':'text-red-600'),children:[expectancy.toFixed(3),\" per $1 bet\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 mb-6\",children:Object.keys(initialConfig).map(key=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:key,className:\"mb-1 text-sm font-medium text-gray-600\",children:key.replace(/([A-Z])/g,' $1').replace(/^./,str=>str.toUpperCase())}),/*#__PURE__*/_jsx(Input,{type:\"number\",name:key,id:key,value:config[key],onChange:handleInputChange,step:key==='winRate'||key==='riskRatio'?0.01:1,min:key==='winRate'?0:key==='riskRatio'?0.1:0,max:key==='winRate'?1:undefined,className:\"bg-white border-gray-300 focus:border-primary focus:ring-primary\"})]},key))}),/*#__PURE__*/_jsx(Button,{onClick:runSimulations,className:\"w-full bg-primary hover:bg-primary/90 text-white font-semibold py-2 px-4 rounded-md mb-6\",children:\"Run Simulation\"}),simulationResults&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-semibold mb-4 text-gray-700\",children:\"Simulation Results\"}),/*#__PURE__*/_jsx(\"div\",{className:\"h-[400px] mb-6 bg-gray-50 p-2 rounded-md shadow\",children:/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:chartData,ref:chartRef,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\",stroke:\"#e0e0e0\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"round\",stroke:\"#666\"}),/*#__PURE__*/_jsx(YAxis,{tickFormatter:yAxisTickFormatter,stroke:\"#666\"}),/*#__PURE__*/_jsx(Tooltip,{contentStyle:{backgroundColor:'rgba(255, 255, 255, 0.9)',borderRadius:'0.5rem',borderColor:'#ccc'},formatter:tooltipFormatter}),/*#__PURE__*/_jsx(Legend,{}),Object.values(simulationResults).map(res=>/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:res.type,name:res.name,stroke:res.color,strokeWidth:2,dot:false},res.name))]})})}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",children:Object.values(simulationResults).sort((a,b)=>b.finalBalance/(b.maxDrawdown||1)-a.finalBalance/(a.maxDrawdown||1)).map(res=>/*#__PURE__*/// Using div instead of Card for simpler styling matching the old site\n_jsxs(\"div\",{className:\"bg-white rounded-md shadow p-4 border-t-4\",style:{borderTopColor:res.color},children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-md font-semibold mb-2\",style:{color:res.color},children:res.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs space-y-1 text-gray-600\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Final Balance: \",/*#__PURE__*/_jsx(\"strong\",{className:res.finalBalance>config.initialBalance?'text-green-600':'text-red-600',children:'$'+formatNumber(res.finalBalance)})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Return: \",/*#__PURE__*/_jsxs(\"strong\",{className:res.finalBalance>config.initialBalance?'text-green-600':'text-red-600',children:[((res.finalBalance/config.initialBalance-1)*100).toFixed(2),\"%\"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Max Drawdown: \",/*#__PURE__*/_jsx(\"strong\",{className:\"text-red-500\",children:'$'+formatNumber(res.maxDrawdown)})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Return/Drawdown: \",/*#__PURE__*/_jsx(\"strong\",{children:formatNumber(res.finalBalance/(res.maxDrawdown||1))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Trades: \",res.tradesCount,\" (W: \",res.wins,\", L: \",res.losses,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Win Rate (Actual): \",res.tradesCount>0?formatNumber(res.wins/res.tradesCount*100,1)+'%':'N/A']}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Largest Bet: \",'$'+formatNumber(res.maxBetUsed)]})]})]},res.name))})]})]}));};export default StrategyAnalyzer;","map":{"version":3,"names":["React","useState","useEffect","useRef","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Button","Input","jsx","_jsx","jsxs","_jsxs","StrategyAnalyzer","initialConfig","initialBalance","winRate","riskRatio","rounds","baseBet","rawBaseBet","maxBetPercent","maxBetSize","consecutiveLossesForDouble","consecutiveWinsForDouble","config","setConfig","simulationResults","setSimulationResults","chartData","setChartData","expectancy","setExpectancy","chartRef","parseFloat","calculatedExpectancy","handleInputChange","e","name","value","type","target","prevConfig","_objectSpread","runSingleStrategy","currentConfig","strategyType","balance","currentBetValue","consecutiveWinLoss","history","maxDrawdown","peakBalance","wins","losses","maxBetUsed","i","actualBet","Math","min","max","isWin","random","drawdown","push","round","finalBalance","tradesCount","runSimulations","strategies","color","allResults","tempChartData","forEach","strategy","result","numRounds","roundData","active","lastHistoryEntry","length","sampleRate","floor","sampledChartData","filter","_","formatNumber","num","digits","arguments","undefined","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","yAxisTickFormatter","concat","tooltipFormatter","strategyName","replace","str","toUpperCase","className","children","toFixed","Object","keys","map","key","htmlFor","id","onChange","step","onClick","width","height","data","ref","strokeDasharray","stroke","dataKey","tickFormatter","contentStyle","backgroundColor","borderRadius","borderColor","formatter","values","res","strokeWidth","dot","sort","a","b","style","borderTopColor"],"sources":["/home/ubuntu/strategy-simulator/src/components/StrategyAnalyzer.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\n// Removed Card import for main container, will use divs and Tailwind classes for styling\n\nconst StrategyAnalyzer = () => {\n  const initialConfig = {\n    initialBalance: 1000,\n    winRate: 0.55,\n    riskRatio: 1,\n    rounds: 1000,\n    baseBet: 10,\n    rawBaseBet: 10,\n    maxBetPercent: 100,\n    maxBetSize: 1000,\n    consecutiveLossesForDouble: 3,\n    consecutiveWinsForDouble: 3,\n  };\n\n  const [config, setConfig] = useState(initialConfig);\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [expectancy, setExpectancy] = useState(0);\n\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const winRate = parseFloat(config.winRate);\n    const riskRatio = parseFloat(config.riskRatio);\n    const calculatedExpectancy = (winRate * riskRatio) - (1 - winRate);\n    setExpectancy(calculatedExpectancy);\n  }, [config.winRate, config.riskRatio]);\n\n  const handleInputChange = (e) => {\n    const { name, value, type } = e.target;\n    setConfig(prevConfig => ({\n      ...prevConfig,\n      [name]: type === 'number' ? parseFloat(value) : value,\n    }));\n  };\n\n  const runSingleStrategy = (currentConfig, strategyType) => {\n    let balance = currentConfig.initialBalance;\n    let currentBetValue = currentConfig.baseBet;\n    if (strategyType === 'raw') {\n        currentBetValue = currentConfig.rawBaseBet;\n    }\n    let consecutiveWinLoss = 0;\n    const history = [];\n    let maxDrawdown = 0;\n    let peakBalance = currentConfig.initialBalance;\n    let wins = 0;\n    let losses = 0;\n    let maxBetUsed = 0;\n\n    for (let i = 0; i < currentConfig.rounds; i++) {\n      if (balance <= 0) break;\n      let actualBet = currentBetValue;\n      if (strategyType !== 'raw') {\n        actualBet = Math.min(\n            currentBetValue, \n            balance * (currentConfig.maxBetPercent / 100), \n            currentConfig.maxBetSize\n        );\n        if (balance < actualBet) actualBet = balance;\n      }\n      if (actualBet <=0) actualBet = 1;\n      maxBetUsed = Math.max(maxBetUsed, actualBet);\n      const isWin = Math.random() < currentConfig.winRate;\n      if (isWin) {\n        balance += actualBet * currentConfig.riskRatio;\n        wins++;\n        if (strategyType === 'martingale' || strategyType === 'linear' || strategyType === 'smartDouble') {\n          consecutiveWinLoss = 0;\n          currentBetValue = currentConfig.baseBet;\n        }\n        if (strategyType === 'antiMartingale') currentBetValue *= 2;\n        if (strategyType === 'antiLinear') currentBetValue += currentConfig.baseBet;\n        if (strategyType === 'antiSmartDouble') {\n          consecutiveWinLoss++;\n          if (consecutiveWinLoss >= currentConfig.consecutiveWinsForDouble) {\n            currentBetValue = currentConfig.baseBet * 2;\n          } else {\n            currentBetValue = currentConfig.baseBet;\n          }\n        }\n      } else {\n        balance -= actualBet;\n        losses++;\n        if (strategyType === 'antiMartingale' || strategyType === 'antiLinear' || strategyType === 'antiSmartDouble') {\n          consecutiveWinLoss = 0;\n          currentBetValue = currentConfig.baseBet;\n        }\n        if (strategyType === 'martingale') currentBetValue *= 2;\n        if (strategyType === 'linear') currentBetValue += currentConfig.baseBet;\n        if (strategyType === 'smartDouble') {\n          consecutiveWinLoss++;\n          if (consecutiveWinLoss >= currentConfig.consecutiveLossesForDouble) {\n            currentBetValue = currentConfig.baseBet * 2;\n          } else {\n            currentBetValue = currentConfig.baseBet;\n          }\n        }\n      }\n      if (strategyType !== 'raw') {\n         currentBetValue = Math.max(1, currentBetValue);\n      }\n      peakBalance = Math.max(peakBalance, balance);\n      const drawdown = peakBalance - balance;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n      history.push({ round: i + 1, balance });\n    }\n    return { history, finalBalance: balance, maxDrawdown, wins, losses, tradesCount: wins + losses, maxBetUsed };\n  };\n\n  const runSimulations = () => {\n    const strategies = [\n      { name: 'Raw', type: 'raw', color: '#10b981' }, // Green\n      { name: 'Martingale', type: 'martingale', color: '#9333ea' }, // Purple\n      { name: 'Anti-Martingale', type: 'antiMartingale', color: '#2563eb' }, // Blue\n      { name: 'Linear', type: 'linear', color: '#eab308' }, // Yellow/Gold\n      { name: 'Anti-Linear', type: 'antiLinear', color: '#dc2626' }, // Red\n      { name: 'Smart Double', type: 'smartDouble', color: '#ff6b00' }, // Orange\n      { name: 'Anti-Smart Double', type: 'antiSmartDouble', color: '#FF1493' }, // Deep Pink\n    ];\n    let allResults = {};\n    let tempChartData = [];\n    strategies.forEach(strategy => {\n      const result = runSingleStrategy(config, strategy.type);\n      allResults[strategy.type] = { ...result, name: strategy.name, color: strategy.color, type: strategy.type };\n    });\n    const numRounds = config.rounds;\n    for (let i = 0; i < numRounds; i++) {\n      let roundData = { round: i + 1 };\n      let active = false;\n      strategies.forEach(strategy => {\n        if (allResults[strategy.type].history[i]) {\n          roundData[strategy.type] = allResults[strategy.type].history[i].balance;\n          active = true;\n        } else {\n          const lastHistoryEntry = allResults[strategy.type].history[allResults[strategy.type].history.length -1];\n          roundData[strategy.type] = lastHistoryEntry ? lastHistoryEntry.balance : null;\n        }\n      });\n      if(active) tempChartData.push(roundData);\n      else break;\n    }\n    const sampleRate = Math.max(1, Math.floor(tempChartData.length / 500));\n    const sampledChartData = tempChartData.filter((_, i) => i % sampleRate === 0);\n    setChartData(sampledChartData);\n    setSimulationResults(allResults);\n  };\n  \n  const formatNumber = (num, digits = 2) => {\n    if (typeof num !== 'number' || isNaN(num)) return 'N/A';\n    return num.toLocaleString(undefined, { minimumFractionDigits: digits, maximumFractionDigits: digits });\n  }\n\n  const yAxisTickFormatter = (value) => `$${formatNumber(value, 0)}`;\n\n  const tooltipFormatter = (value, name) => {\n    // Ensure simulationResults is not null and the specific strategy result exists\n    const strategyName = simulationResults && simulationResults[name] ? simulationResults[name].name : name.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());\n    return [`$${formatNumber(value)}`, strategyName];\n  };\n\n  return (\n    // Removed main Card component, using div with Tailwind classes for styling\n    <div className=\"p-6 bg-white rounded-lg shadow-lg mb-8\">\n      <h2 className=\"text-2xl font-semibold mb-2 text-gray-700\">Strategy Configuration</h2>\n      <div className=\"p-4 mb-6 bg-blue-50 rounded-md\">\n        <span className=\"text-sm text-blue-700\">Base Setup Expectancy: </span>\n        <span className={`text-sm font-bold ${expectancy > 0 ? 'text-green-600' : 'text-red-600'}`}>\n          {expectancy.toFixed(3)} per $1 bet\n        </span>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 mb-6\">\n        {Object.keys(initialConfig).map(key => (\n          <div key={key} className=\"flex flex-col\">\n            <label htmlFor={key} className=\"mb-1 text-sm font-medium text-gray-600\">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</label>\n            <Input\n              type=\"number\"\n              name={key}\n              id={key}\n              value={config[key]}\n              onChange={handleInputChange}\n              step={key === 'winRate' || key === 'riskRatio' ? 0.01 : 1}\n              min={key === 'winRate' ? 0 : (key === 'riskRatio' ? 0.1 : 0)}\n              max={key === 'winRate' ? 1 : undefined}\n              className=\"bg-white border-gray-300 focus:border-primary focus:ring-primary\"\n            />\n          </div>\n        ))}\n      </div>\n      \n      <Button onClick={runSimulations} className=\"w-full bg-primary hover:bg-primary/90 text-white font-semibold py-2 px-4 rounded-md mb-6\">\n        Run Simulation\n      </Button>\n\n      {simulationResults && (\n        <div className=\"mt-6\">\n          <h3 className=\"text-xl font-semibold mb-4 text-gray-700\">Simulation Results</h3>\n          <div className=\"h-[400px] mb-6 bg-gray-50 p-2 rounded-md shadow\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={chartData} ref={chartRef}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e0e0e0\" />\n                <XAxis dataKey=\"round\" stroke=\"#666\" />\n                <YAxis tickFormatter={yAxisTickFormatter} stroke=\"#666\"/>\n                <Tooltip \n                  contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.9)', borderRadius: '0.5rem', borderColor: '#ccc' }} \n                  formatter={tooltipFormatter}\n                />\n                <Legend />\n                {Object.values(simulationResults).map(res => (\n                  <Line key={res.name} type=\"monotone\" dataKey={res.type} name={res.name} stroke={res.color} strokeWidth={2} dot={false} />\n                ))}\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Object.values(simulationResults).sort((a,b) => (b.finalBalance / (b.maxDrawdown || 1)) - (a.finalBalance / (a.maxDrawdown || 1))).map(res => (\n              // Using div instead of Card for simpler styling matching the old site\n              <div key={res.name} className=\"bg-white rounded-md shadow p-4 border-t-4\" style={{ borderTopColor: res.color }}>\n                <h4 className=\"text-md font-semibold mb-2\" style={{ color: res.color }}>{res.name}</h4>\n                <div className=\"text-xs space-y-1 text-gray-600\">\n                  <p>Final Balance: <strong className={res.finalBalance > config.initialBalance ? 'text-green-600' : 'text-red-600'}>{'$' + formatNumber(res.finalBalance)}</strong></p>\n                  <p>Total Return: <strong className={res.finalBalance > config.initialBalance ? 'text-green-600' : 'text-red-600'}>{((res.finalBalance / config.initialBalance - 1) * 100).toFixed(2)}%</strong></p>\n                  <p>Max Drawdown: <strong className=\"text-red-500\">{'$' + formatNumber(res.maxDrawdown)}</strong></p>\n                  <p>Return/Drawdown: <strong>{formatNumber(res.finalBalance / (res.maxDrawdown || 1))}</strong></p>\n                  <p>Trades: {res.tradesCount} (W: {res.wins}, L: {res.losses})</p>\n                  <p>Win Rate (Actual): {res.tradesCount > 0 ? formatNumber((res.wins / res.tradesCount) * 100, 1) + '%' : 'N/A'}</p>\n                  <p>Largest Bet: {'$' + formatNumber(res.maxBetUsed)}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StrategyAnalyzer;\n\n"],"mappings":"4JAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,SAAS,CAAEC,IAAI,CAAEC,KAAK,CAAEC,KAAK,CAAEC,aAAa,CAAEC,OAAO,CAAEC,MAAM,CAAEC,mBAAmB,KAAQ,UAAU,CAC7G,OAASC,MAAM,KAAQ,aAAa,CACpC,OAASC,KAAK,KAAQ,YAAY,CAClC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,aAAa,CAAG,CACpBC,cAAc,CAAE,IAAI,CACpBC,OAAO,CAAE,IAAI,CACbC,SAAS,CAAE,CAAC,CACZC,MAAM,CAAE,IAAI,CACZC,OAAO,CAAE,EAAE,CACXC,UAAU,CAAE,EAAE,CACdC,aAAa,CAAE,GAAG,CAClBC,UAAU,CAAE,IAAI,CAChBC,0BAA0B,CAAE,CAAC,CAC7BC,wBAAwB,CAAE,CAC5B,CAAC,CAED,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAG9B,QAAQ,CAACkB,aAAa,CAAC,CACnD,KAAM,CAACa,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGhC,QAAQ,CAAC,IAAI,CAAC,CAChE,KAAM,CAACiC,SAAS,CAAEC,YAAY,CAAC,CAAGlC,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACmC,UAAU,CAAEC,aAAa,CAAC,CAAGpC,QAAQ,CAAC,CAAC,CAAC,CAE/C,KAAM,CAAAqC,QAAQ,CAAGnC,MAAM,CAAC,IAAI,CAAC,CAE7BD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,OAAO,CAAGkB,UAAU,CAACT,MAAM,CAACT,OAAO,CAAC,CAC1C,KAAM,CAAAC,SAAS,CAAGiB,UAAU,CAACT,MAAM,CAACR,SAAS,CAAC,CAC9C,KAAM,CAAAkB,oBAAoB,CAAInB,OAAO,CAAGC,SAAS,EAAK,CAAC,CAAGD,OAAO,CAAC,CAClEgB,aAAa,CAACG,oBAAoB,CAAC,CACrC,CAAC,CAAE,CAACV,MAAM,CAACT,OAAO,CAAES,MAAM,CAACR,SAAS,CAAC,CAAC,CAEtC,KAAM,CAAAmB,iBAAiB,CAAIC,CAAC,EAAK,CAC/B,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAEC,IAAK,CAAC,CAAGH,CAAC,CAACI,MAAM,CACtCf,SAAS,CAACgB,UAAU,EAAAC,aAAA,CAAAA,aAAA,IACfD,UAAU,MACb,CAACJ,IAAI,EAAGE,IAAI,GAAK,QAAQ,CAAGN,UAAU,CAACK,KAAK,CAAC,CAAGA,KAAK,EACrD,CAAC,CACL,CAAC,CAED,KAAM,CAAAK,iBAAiB,CAAGA,CAACC,aAAa,CAAEC,YAAY,GAAK,CACzD,GAAI,CAAAC,OAAO,CAAGF,aAAa,CAAC9B,cAAc,CAC1C,GAAI,CAAAiC,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CAC3C,GAAI2B,YAAY,GAAK,KAAK,CAAE,CACxBE,eAAe,CAAGH,aAAa,CAACzB,UAAU,CAC9C,CACA,GAAI,CAAA6B,kBAAkB,CAAG,CAAC,CAC1B,KAAM,CAAAC,OAAO,CAAG,EAAE,CAClB,GAAI,CAAAC,WAAW,CAAG,CAAC,CACnB,GAAI,CAAAC,WAAW,CAAGP,aAAa,CAAC9B,cAAc,CAC9C,GAAI,CAAAsC,IAAI,CAAG,CAAC,CACZ,GAAI,CAAAC,MAAM,CAAG,CAAC,CACd,GAAI,CAAAC,UAAU,CAAG,CAAC,CAElB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGX,aAAa,CAAC3B,MAAM,CAAEsC,CAAC,EAAE,CAAE,CAC7C,GAAIT,OAAO,EAAI,CAAC,CAAE,MAClB,GAAI,CAAAU,SAAS,CAAGT,eAAe,CAC/B,GAAIF,YAAY,GAAK,KAAK,CAAE,CAC1BW,SAAS,CAAGC,IAAI,CAACC,GAAG,CAChBX,eAAe,CACfD,OAAO,EAAIF,aAAa,CAACxB,aAAa,CAAG,GAAG,CAAC,CAC7CwB,aAAa,CAACvB,UAClB,CAAC,CACD,GAAIyB,OAAO,CAAGU,SAAS,CAAEA,SAAS,CAAGV,OAAO,CAC9C,CACA,GAAIU,SAAS,EAAG,CAAC,CAAEA,SAAS,CAAG,CAAC,CAChCF,UAAU,CAAGG,IAAI,CAACE,GAAG,CAACL,UAAU,CAAEE,SAAS,CAAC,CAC5C,KAAM,CAAAI,KAAK,CAAGH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAGjB,aAAa,CAAC7B,OAAO,CACnD,GAAI6C,KAAK,CAAE,CACTd,OAAO,EAAIU,SAAS,CAAGZ,aAAa,CAAC5B,SAAS,CAC9CoC,IAAI,EAAE,CACN,GAAIP,YAAY,GAAK,YAAY,EAAIA,YAAY,GAAK,QAAQ,EAAIA,YAAY,GAAK,aAAa,CAAE,CAChGG,kBAAkB,CAAG,CAAC,CACtBD,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CACzC,CACA,GAAI2B,YAAY,GAAK,gBAAgB,CAAEE,eAAe,EAAI,CAAC,CAC3D,GAAIF,YAAY,GAAK,YAAY,CAAEE,eAAe,EAAIH,aAAa,CAAC1B,OAAO,CAC3E,GAAI2B,YAAY,GAAK,iBAAiB,CAAE,CACtCG,kBAAkB,EAAE,CACpB,GAAIA,kBAAkB,EAAIJ,aAAa,CAACrB,wBAAwB,CAAE,CAChEwB,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CAAG,CAAC,CAC7C,CAAC,IAAM,CACL6B,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CACzC,CACF,CACF,CAAC,IAAM,CACL4B,OAAO,EAAIU,SAAS,CACpBH,MAAM,EAAE,CACR,GAAIR,YAAY,GAAK,gBAAgB,EAAIA,YAAY,GAAK,YAAY,EAAIA,YAAY,GAAK,iBAAiB,CAAE,CAC5GG,kBAAkB,CAAG,CAAC,CACtBD,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CACzC,CACA,GAAI2B,YAAY,GAAK,YAAY,CAAEE,eAAe,EAAI,CAAC,CACvD,GAAIF,YAAY,GAAK,QAAQ,CAAEE,eAAe,EAAIH,aAAa,CAAC1B,OAAO,CACvE,GAAI2B,YAAY,GAAK,aAAa,CAAE,CAClCG,kBAAkB,EAAE,CACpB,GAAIA,kBAAkB,EAAIJ,aAAa,CAACtB,0BAA0B,CAAE,CAClEyB,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CAAG,CAAC,CAC7C,CAAC,IAAM,CACL6B,eAAe,CAAGH,aAAa,CAAC1B,OAAO,CACzC,CACF,CACF,CACA,GAAI2B,YAAY,GAAK,KAAK,CAAE,CACzBE,eAAe,CAAGU,IAAI,CAACE,GAAG,CAAC,CAAC,CAAEZ,eAAe,CAAC,CACjD,CACAI,WAAW,CAAGM,IAAI,CAACE,GAAG,CAACR,WAAW,CAAEL,OAAO,CAAC,CAC5C,KAAM,CAAAgB,QAAQ,CAAGX,WAAW,CAAGL,OAAO,CACtCI,WAAW,CAAGO,IAAI,CAACE,GAAG,CAACT,WAAW,CAAEY,QAAQ,CAAC,CAC7Cb,OAAO,CAACc,IAAI,CAAC,CAAEC,KAAK,CAAET,CAAC,CAAG,CAAC,CAAET,OAAQ,CAAC,CAAC,CACzC,CACA,MAAO,CAAEG,OAAO,CAAEgB,YAAY,CAAEnB,OAAO,CAAEI,WAAW,CAAEE,IAAI,CAAEC,MAAM,CAAEa,WAAW,CAAEd,IAAI,CAAGC,MAAM,CAAEC,UAAW,CAAC,CAC9G,CAAC,CAED,KAAM,CAAAa,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,UAAU,CAAG,CACjB,CAAE/B,IAAI,CAAE,KAAK,CAAEE,IAAI,CAAE,KAAK,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AAChD,CAAEhC,IAAI,CAAE,YAAY,CAAEE,IAAI,CAAE,YAAY,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AAC9D,CAAEhC,IAAI,CAAE,iBAAiB,CAAEE,IAAI,CAAE,gBAAgB,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AACvE,CAAEhC,IAAI,CAAE,QAAQ,CAAEE,IAAI,CAAE,QAAQ,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AACtD,CAAEhC,IAAI,CAAE,aAAa,CAAEE,IAAI,CAAE,YAAY,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AAC/D,CAAEhC,IAAI,CAAE,cAAc,CAAEE,IAAI,CAAE,aAAa,CAAE8B,KAAK,CAAE,SAAU,CAAC,CAAE;AACjE,CAAEhC,IAAI,CAAE,mBAAmB,CAAEE,IAAI,CAAE,iBAAiB,CAAE8B,KAAK,CAAE,SAAU,CAAG;AAAA,CAC3E,CACD,GAAI,CAAAC,UAAU,CAAG,CAAC,CAAC,CACnB,GAAI,CAAAC,aAAa,CAAG,EAAE,CACtBH,UAAU,CAACI,OAAO,CAACC,QAAQ,EAAI,CAC7B,KAAM,CAAAC,MAAM,CAAG/B,iBAAiB,CAACnB,MAAM,CAAEiD,QAAQ,CAAClC,IAAI,CAAC,CACvD+B,UAAU,CAACG,QAAQ,CAAClC,IAAI,CAAC,CAAAG,aAAA,CAAAA,aAAA,IAAQgC,MAAM,MAAErC,IAAI,CAAEoC,QAAQ,CAACpC,IAAI,CAAEgC,KAAK,CAAEI,QAAQ,CAACJ,KAAK,CAAE9B,IAAI,CAAEkC,QAAQ,CAAClC,IAAI,EAAE,CAC5G,CAAC,CAAC,CACF,KAAM,CAAAoC,SAAS,CAAGnD,MAAM,CAACP,MAAM,CAC/B,IAAK,GAAI,CAAAsC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGoB,SAAS,CAAEpB,CAAC,EAAE,CAAE,CAClC,GAAI,CAAAqB,SAAS,CAAG,CAAEZ,KAAK,CAAET,CAAC,CAAG,CAAE,CAAC,CAChC,GAAI,CAAAsB,MAAM,CAAG,KAAK,CAClBT,UAAU,CAACI,OAAO,CAACC,QAAQ,EAAI,CAC7B,GAAIH,UAAU,CAACG,QAAQ,CAAClC,IAAI,CAAC,CAACU,OAAO,CAACM,CAAC,CAAC,CAAE,CACxCqB,SAAS,CAACH,QAAQ,CAAClC,IAAI,CAAC,CAAG+B,UAAU,CAACG,QAAQ,CAAClC,IAAI,CAAC,CAACU,OAAO,CAACM,CAAC,CAAC,CAACT,OAAO,CACvE+B,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,CACL,KAAM,CAAAC,gBAAgB,CAAGR,UAAU,CAACG,QAAQ,CAAClC,IAAI,CAAC,CAACU,OAAO,CAACqB,UAAU,CAACG,QAAQ,CAAClC,IAAI,CAAC,CAACU,OAAO,CAAC8B,MAAM,CAAE,CAAC,CAAC,CACvGH,SAAS,CAACH,QAAQ,CAAClC,IAAI,CAAC,CAAGuC,gBAAgB,CAAGA,gBAAgB,CAAChC,OAAO,CAAG,IAAI,CAC/E,CACF,CAAC,CAAC,CACF,GAAG+B,MAAM,CAAEN,aAAa,CAACR,IAAI,CAACa,SAAS,CAAC,CAAC,IACpC,OACP,CACA,KAAM,CAAAI,UAAU,CAAGvB,IAAI,CAACE,GAAG,CAAC,CAAC,CAAEF,IAAI,CAACwB,KAAK,CAACV,aAAa,CAACQ,MAAM,CAAG,GAAG,CAAC,CAAC,CACtE,KAAM,CAAAG,gBAAgB,CAAGX,aAAa,CAACY,MAAM,CAAC,CAACC,CAAC,CAAE7B,CAAC,GAAKA,CAAC,CAAGyB,UAAU,GAAK,CAAC,CAAC,CAC7EnD,YAAY,CAACqD,gBAAgB,CAAC,CAC9BvD,oBAAoB,CAAC2C,UAAU,CAAC,CAClC,CAAC,CAED,KAAM,CAAAe,YAAY,CAAG,QAAAA,CAACC,GAAG,CAAiB,IAAf,CAAAC,MAAM,CAAAC,SAAA,CAAAT,MAAA,IAAAS,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,CAAC,CACnC,GAAI,MAAO,CAAAF,GAAG,GAAK,QAAQ,EAAII,KAAK,CAACJ,GAAG,CAAC,CAAE,MAAO,KAAK,CACvD,MAAO,CAAAA,GAAG,CAACK,cAAc,CAACF,SAAS,CAAE,CAAEG,qBAAqB,CAAEL,MAAM,CAAEM,qBAAqB,CAAEN,MAAO,CAAC,CAAC,CACxG,CAAC,CAED,KAAM,CAAAO,kBAAkB,CAAIxD,KAAK,MAAAyD,MAAA,CAASV,YAAY,CAAC/C,KAAK,CAAE,CAAC,CAAC,CAAE,CAElE,KAAM,CAAA0D,gBAAgB,CAAGA,CAAC1D,KAAK,CAAED,IAAI,GAAK,CACxC;AACA,KAAM,CAAA4D,YAAY,CAAGvE,iBAAiB,EAAIA,iBAAiB,CAACW,IAAI,CAAC,CAAGX,iBAAiB,CAACW,IAAI,CAAC,CAACA,IAAI,CAAGA,IAAI,CAAC6D,OAAO,CAAC,UAAU,CAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,CAAEC,GAAG,EAAIA,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAC1K,MAAO,KAAAL,MAAA,CAAKV,YAAY,CAAC/C,KAAK,CAAC,EAAI2D,YAAY,CAAC,CAClD,CAAC,CAED,oBACE;AACAtF,KAAA,QAAK0F,SAAS,CAAC,wCAAwC,CAAAC,QAAA,eACrD7F,IAAA,OAAI4F,SAAS,CAAC,2CAA2C,CAAAC,QAAA,CAAC,wBAAsB,CAAI,CAAC,cACrF3F,KAAA,QAAK0F,SAAS,CAAC,gCAAgC,CAAAC,QAAA,eAC7C7F,IAAA,SAAM4F,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,yBAAuB,CAAM,CAAC,cACtE3F,KAAA,SAAM0F,SAAS,sBAAAN,MAAA,CAAuBjE,UAAU,CAAG,CAAC,CAAG,gBAAgB,CAAG,cAAc,CAAG,CAAAwE,QAAA,EACxFxE,UAAU,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,aACzB,EAAM,CAAC,EACJ,CAAC,cAEN9F,IAAA,QAAK4F,SAAS,CAAC,qEAAqE,CAAAC,QAAA,CACjFE,MAAM,CAACC,IAAI,CAAC5F,aAAa,CAAC,CAAC6F,GAAG,CAACC,GAAG,eACjChG,KAAA,QAAe0F,SAAS,CAAC,eAAe,CAAAC,QAAA,eACtC7F,IAAA,UAAOmG,OAAO,CAAED,GAAI,CAACN,SAAS,CAAC,wCAAwC,CAAAC,QAAA,CAAEK,GAAG,CAACT,OAAO,CAAC,UAAU,CAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,CAAEC,GAAG,EAAIA,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAAQ,CAAC,cACxJ3F,IAAA,CAACF,KAAK,EACJgC,IAAI,CAAC,QAAQ,CACbF,IAAI,CAAEsE,GAAI,CACVE,EAAE,CAAEF,GAAI,CACRrE,KAAK,CAAEd,MAAM,CAACmF,GAAG,CAAE,CACnBG,QAAQ,CAAE3E,iBAAkB,CAC5B4E,IAAI,CAAEJ,GAAG,GAAK,SAAS,EAAIA,GAAG,GAAK,WAAW,CAAG,IAAI,CAAG,CAAE,CAC1DjD,GAAG,CAAEiD,GAAG,GAAK,SAAS,CAAG,CAAC,CAAIA,GAAG,GAAK,WAAW,CAAG,GAAG,CAAG,CAAG,CAC7DhD,GAAG,CAAEgD,GAAG,GAAK,SAAS,CAAG,CAAC,CAAGlB,SAAU,CACvCY,SAAS,CAAC,kEAAkE,CAC7E,CAAC,GAZMM,GAaL,CACN,CAAC,CACC,CAAC,cAENlG,IAAA,CAACH,MAAM,EAAC0G,OAAO,CAAE7C,cAAe,CAACkC,SAAS,CAAC,0FAA0F,CAAAC,QAAA,CAAC,gBAEtI,CAAQ,CAAC,CAER5E,iBAAiB,eAChBf,KAAA,QAAK0F,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB7F,IAAA,OAAI4F,SAAS,CAAC,0CAA0C,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,cAChF7F,IAAA,QAAK4F,SAAS,CAAC,iDAAiD,CAAAC,QAAA,cAC9D7F,IAAA,CAACJ,mBAAmB,EAAC4G,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAAAZ,QAAA,cAC7C3F,KAAA,CAACb,SAAS,EAACqH,IAAI,CAAEvF,SAAU,CAACwF,GAAG,CAAEpF,QAAS,CAAAsE,QAAA,eACxC7F,IAAA,CAACP,aAAa,EAACmH,eAAe,CAAC,KAAK,CAACC,MAAM,CAAC,SAAS,CAAE,CAAC,cACxD7G,IAAA,CAACT,KAAK,EAACuH,OAAO,CAAC,OAAO,CAACD,MAAM,CAAC,MAAM,CAAE,CAAC,cACvC7G,IAAA,CAACR,KAAK,EAACuH,aAAa,CAAE1B,kBAAmB,CAACwB,MAAM,CAAC,MAAM,CAAC,CAAC,cACzD7G,IAAA,CAACN,OAAO,EACNsH,YAAY,CAAE,CAAEC,eAAe,CAAE,0BAA0B,CAAEC,YAAY,CAAE,QAAQ,CAAEC,WAAW,CAAE,MAAO,CAAE,CAC3GC,SAAS,CAAE7B,gBAAiB,CAC7B,CAAC,cACFvF,IAAA,CAACL,MAAM,GAAE,CAAC,CACToG,MAAM,CAACsB,MAAM,CAACpG,iBAAiB,CAAC,CAACgF,GAAG,CAACqB,GAAG,eACvCtH,IAAA,CAACV,IAAI,EAAgBwC,IAAI,CAAC,UAAU,CAACgF,OAAO,CAAEQ,GAAG,CAACxF,IAAK,CAACF,IAAI,CAAE0F,GAAG,CAAC1F,IAAK,CAACiF,MAAM,CAAES,GAAG,CAAC1D,KAAM,CAAC2D,WAAW,CAAE,CAAE,CAACC,GAAG,CAAE,KAAM,EAA3GF,GAAG,CAAC1F,IAAyG,CACzH,CAAC,EACO,CAAC,CACO,CAAC,CACnB,CAAC,cAEN5B,IAAA,QAAK4F,SAAS,CAAC,sDAAsD,CAAAC,QAAA,CAClEE,MAAM,CAACsB,MAAM,CAACpG,iBAAiB,CAAC,CAACwG,IAAI,CAAC,CAACC,CAAC,CAACC,CAAC,GAAMA,CAAC,CAACnE,YAAY,EAAImE,CAAC,CAAClF,WAAW,EAAI,CAAC,CAAC,CAAKiF,CAAC,CAAClE,YAAY,EAAIkE,CAAC,CAACjF,WAAW,EAAI,CAAC,CAAE,CAAC,CAACwD,GAAG,CAACqB,GAAG,eACxI;AACApH,KAAA,QAAoB0F,SAAS,CAAC,2CAA2C,CAACgC,KAAK,CAAE,CAAEC,cAAc,CAAEP,GAAG,CAAC1D,KAAM,CAAE,CAAAiC,QAAA,eAC7G7F,IAAA,OAAI4F,SAAS,CAAC,4BAA4B,CAACgC,KAAK,CAAE,CAAEhE,KAAK,CAAE0D,GAAG,CAAC1D,KAAM,CAAE,CAAAiC,QAAA,CAAEyB,GAAG,CAAC1F,IAAI,CAAK,CAAC,cACvF1B,KAAA,QAAK0F,SAAS,CAAC,iCAAiC,CAAAC,QAAA,eAC9C3F,KAAA,MAAA2F,QAAA,EAAG,iBAAe,cAAA7F,IAAA,WAAQ4F,SAAS,CAAE0B,GAAG,CAAC9D,YAAY,CAAGzC,MAAM,CAACV,cAAc,CAAG,gBAAgB,CAAG,cAAe,CAAAwF,QAAA,CAAE,GAAG,CAAGjB,YAAY,CAAC0C,GAAG,CAAC9D,YAAY,CAAC,CAAS,CAAC,EAAG,CAAC,cACtKtD,KAAA,MAAA2F,QAAA,EAAG,gBAAc,cAAA3F,KAAA,WAAQ0F,SAAS,CAAE0B,GAAG,CAAC9D,YAAY,CAAGzC,MAAM,CAACV,cAAc,CAAG,gBAAgB,CAAG,cAAe,CAAAwF,QAAA,EAAE,CAAC,CAACyB,GAAG,CAAC9D,YAAY,CAAGzC,MAAM,CAACV,cAAc,CAAG,CAAC,EAAI,GAAG,EAAEyF,OAAO,CAAC,CAAC,CAAC,CAAC,GAAC,EAAQ,CAAC,EAAG,CAAC,cACnM5F,KAAA,MAAA2F,QAAA,EAAG,gBAAc,cAAA7F,IAAA,WAAQ4F,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAE,GAAG,CAAGjB,YAAY,CAAC0C,GAAG,CAAC7E,WAAW,CAAC,CAAS,CAAC,EAAG,CAAC,cACpGvC,KAAA,MAAA2F,QAAA,EAAG,mBAAiB,cAAA7F,IAAA,WAAA6F,QAAA,CAASjB,YAAY,CAAC0C,GAAG,CAAC9D,YAAY,EAAI8D,GAAG,CAAC7E,WAAW,EAAI,CAAC,CAAC,CAAC,CAAS,CAAC,EAAG,CAAC,cAClGvC,KAAA,MAAA2F,QAAA,EAAG,UAAQ,CAACyB,GAAG,CAAC7D,WAAW,CAAC,OAAK,CAAC6D,GAAG,CAAC3E,IAAI,CAAC,OAAK,CAAC2E,GAAG,CAAC1E,MAAM,CAAC,GAAC,EAAG,CAAC,cACjE1C,KAAA,MAAA2F,QAAA,EAAG,qBAAmB,CAACyB,GAAG,CAAC7D,WAAW,CAAG,CAAC,CAAGmB,YAAY,CAAE0C,GAAG,CAAC3E,IAAI,CAAG2E,GAAG,CAAC7D,WAAW,CAAI,GAAG,CAAE,CAAC,CAAC,CAAG,GAAG,CAAG,KAAK,EAAI,CAAC,cACnHvD,KAAA,MAAA2F,QAAA,EAAG,eAAa,CAAC,GAAG,CAAGjB,YAAY,CAAC0C,GAAG,CAACzE,UAAU,CAAC,EAAI,CAAC,EACrD,CAAC,GAVEyE,GAAG,CAAC1F,IAWT,CACN,CAAC,CACC,CAAC,EACH,CACN,EACE,CAAC,EAEV,CAAC,CAED,cAAe,CAAAzB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}