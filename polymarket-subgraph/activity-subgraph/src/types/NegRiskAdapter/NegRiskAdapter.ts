// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MarketPrepared extends ethereum.Event {
  get params(): MarketPrepared__Params {
    return new MarketPrepared__Params(this);
  }
}

export class MarketPrepared__Params {
  _event: MarketPrepared;

  constructor(event: MarketPrepared) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get feeBips(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdminAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OutcomeReported extends ethereum.Event {
  get params(): OutcomeReported__Params {
    return new OutcomeReported__Params(this);
  }
}

export class OutcomeReported__Params {
  _event: OutcomeReported;

  constructor(event: OutcomeReported) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get questionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get outcome(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PayoutRedemption extends ethereum.Event {
  get params(): PayoutRedemption__Params {
    return new PayoutRedemption__Params(this);
  }
}

export class PayoutRedemption__Params {
  _event: PayoutRedemption;

  constructor(event: PayoutRedemption) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get conditionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get payout(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PositionSplit extends ethereum.Event {
  get params(): PositionSplit__Params {
    return new PositionSplit__Params(this);
  }
}

export class PositionSplit__Params {
  _event: PositionSplit;

  constructor(event: PositionSplit) {
    this._event = event;
  }

  get stakeholder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get conditionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionsConverted extends ethereum.Event {
  get params(): PositionsConverted__Params {
    return new PositionsConverted__Params(this);
  }
}

export class PositionsConverted__Params {
  _event: PositionsConverted;

  constructor(event: PositionsConverted) {
    this._event = event;
  }

  get stakeholder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marketId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get indexSet(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PositionsMerge extends ethereum.Event {
  get params(): PositionsMerge__Params {
    return new PositionsMerge__Params(this);
  }
}

export class PositionsMerge__Params {
  _event: PositionsMerge;

  constructor(event: PositionsMerge) {
    this._event = event;
  }

  get stakeholder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get conditionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class QuestionPrepared extends ethereum.Event {
  get params(): QuestionPrepared__Params {
    return new QuestionPrepared__Params(this);
  }
}

export class QuestionPrepared__Params {
  _event: QuestionPrepared;

  constructor(event: QuestionPrepared) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get questionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RemovedAdmin extends ethereum.Event {
  get params(): RemovedAdmin__Params {
    return new RemovedAdmin__Params(this);
  }
}

export class RemovedAdmin__Params {
  _event: RemovedAdmin;

  constructor(event: RemovedAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NegRiskAdapter extends ethereum.SmartContract {
  static bind(address: Address): NegRiskAdapter {
    return new NegRiskAdapter("NegRiskAdapter", address);
  }

  FEE_DENOMINATOR(): BigInt {
    let result = super.call(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_FEE_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NO_TOKEN_BURN_ADDRESS(): Address {
    let result = super.call(
      "NO_TOKEN_BURN_ADDRESS",
      "NO_TOKEN_BURN_ADDRESS():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_NO_TOKEN_BURN_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "NO_TOKEN_BURN_ADDRESS",
      "NO_TOKEN_BURN_ADDRESS():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admins(param0: Address): BigInt {
    let result = super.call("admins", "admins(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_admins(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("admins", "admins(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address, _id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(_owners: Array<Address>, _ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_owners),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    _owners: Array<Address>,
    _ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(_owners),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  col(): Address {
    let result = super.call("col", "col():(address)", []);

    return result[0].toAddress();
  }

  try_col(): ethereum.CallResult<Address> {
    let result = super.tryCall("col", "col():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ctf(): Address {
    let result = super.call("ctf", "ctf():(address)", []);

    return result[0].toAddress();
  }

  try_ctf(): ethereum.CallResult<Address> {
    let result = super.tryCall("ctf", "ctf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConditionId(_questionId: Bytes): Bytes {
    let result = super.call(
      "getConditionId",
      "getConditionId(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_questionId)],
    );

    return result[0].toBytes();
  }

  try_getConditionId(_questionId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getConditionId",
      "getConditionId(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_questionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDetermined(_marketId: Bytes): boolean {
    let result = super.call("getDetermined", "getDetermined(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);

    return result[0].toBoolean();
  }

  try_getDetermined(_marketId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getDetermined",
      "getDetermined(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_marketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getFeeBips(_marketId: Bytes): BigInt {
    let result = super.call("getFeeBips", "getFeeBips(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getFeeBips(_marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFeeBips", "getFeeBips(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketData(_marketId: Bytes): Bytes {
    let result = super.call(
      "getMarketData",
      "getMarketData(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_marketId)],
    );

    return result[0].toBytes();
  }

  try_getMarketData(_marketId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getMarketData",
      "getMarketData(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_marketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getOracle(_marketId: Bytes): Address {
    let result = super.call("getOracle", "getOracle(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);

    return result[0].toAddress();
  }

  try_getOracle(_marketId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getOracle", "getOracle(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPositionId(_questionId: Bytes, _outcome: boolean): BigInt {
    let result = super.call(
      "getPositionId",
      "getPositionId(bytes32,bool):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_questionId),
        ethereum.Value.fromBoolean(_outcome),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPositionId(
    _questionId: Bytes,
    _outcome: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionId",
      "getPositionId(bytes32,bool):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_questionId),
        ethereum.Value.fromBoolean(_outcome),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getQuestionCount(_marketId: Bytes): BigInt {
    let result = super.call(
      "getQuestionCount",
      "getQuestionCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_marketId)],
    );

    return result[0].toBigInt();
  }

  try_getQuestionCount(_marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuestionCount",
      "getQuestionCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_marketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getResult(_marketId: Bytes): BigInt {
    let result = super.call("getResult", "getResult(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getResult(_marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getResult", "getResult(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdmin(addr: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(addr),
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(addr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  prepareMarket(_feeBips: BigInt, _metadata: Bytes): Bytes {
    let result = super.call(
      "prepareMarket",
      "prepareMarket(uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_feeBips),
        ethereum.Value.fromBytes(_metadata),
      ],
    );

    return result[0].toBytes();
  }

  try_prepareMarket(
    _feeBips: BigInt,
    _metadata: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "prepareMarket",
      "prepareMarket(uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_feeBips),
        ethereum.Value.fromBytes(_metadata),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  prepareQuestion(_marketId: Bytes, _metadata: Bytes): Bytes {
    let result = super.call(
      "prepareQuestion",
      "prepareQuestion(bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_marketId),
        ethereum.Value.fromBytes(_metadata),
      ],
    );

    return result[0].toBytes();
  }

  try_prepareQuestion(
    _marketId: Bytes,
    _metadata: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "prepareQuestion",
      "prepareQuestion(bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_marketId),
        ethereum.Value.fromBytes(_metadata),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wcol(): Address {
    let result = super.call("wcol", "wcol():(address)", []);

    return result[0].toAddress();
  }

  try_wcol(): ethereum.CallResult<Address> {
    let result = super.tryCall("wcol", "wcol():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ctf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class ConvertPositionsCall extends ethereum.Call {
  get inputs(): ConvertPositionsCall__Inputs {
    return new ConvertPositionsCall__Inputs(this);
  }

  get outputs(): ConvertPositionsCall__Outputs {
    return new ConvertPositionsCall__Outputs(this);
  }
}

export class ConvertPositionsCall__Inputs {
  _call: ConvertPositionsCall;

  constructor(call: ConvertPositionsCall) {
    this._call = call;
  }

  get _marketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _indexSet(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConvertPositionsCall__Outputs {
  _call: ConvertPositionsCall;

  constructor(call: ConvertPositionsCall) {
    this._call = call;
  }
}

export class MergePositionsCall extends ethereum.Call {
  get inputs(): MergePositionsCall__Inputs {
    return new MergePositionsCall__Inputs(this);
  }

  get outputs(): MergePositionsCall__Outputs {
    return new MergePositionsCall__Outputs(this);
  }
}

export class MergePositionsCall__Inputs {
  _call: MergePositionsCall;

  constructor(call: MergePositionsCall) {
    this._call = call;
  }

  get _collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _conditionId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MergePositionsCall__Outputs {
  _call: MergePositionsCall;

  constructor(call: MergePositionsCall) {
    this._call = call;
  }
}

export class MergePositions1Call extends ethereum.Call {
  get inputs(): MergePositions1Call__Inputs {
    return new MergePositions1Call__Inputs(this);
  }

  get outputs(): MergePositions1Call__Outputs {
    return new MergePositions1Call__Outputs(this);
  }
}

export class MergePositions1Call__Inputs {
  _call: MergePositions1Call;

  constructor(call: MergePositions1Call) {
    this._call = call;
  }

  get _conditionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MergePositions1Call__Outputs {
  _call: MergePositions1Call;

  constructor(call: MergePositions1Call) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PrepareMarketCall extends ethereum.Call {
  get inputs(): PrepareMarketCall__Inputs {
    return new PrepareMarketCall__Inputs(this);
  }

  get outputs(): PrepareMarketCall__Outputs {
    return new PrepareMarketCall__Outputs(this);
  }
}

export class PrepareMarketCall__Inputs {
  _call: PrepareMarketCall;

  constructor(call: PrepareMarketCall) {
    this._call = call;
  }

  get _feeBips(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PrepareMarketCall__Outputs {
  _call: PrepareMarketCall;

  constructor(call: PrepareMarketCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PrepareQuestionCall extends ethereum.Call {
  get inputs(): PrepareQuestionCall__Inputs {
    return new PrepareQuestionCall__Inputs(this);
  }

  get outputs(): PrepareQuestionCall__Outputs {
    return new PrepareQuestionCall__Outputs(this);
  }
}

export class PrepareQuestionCall__Inputs {
  _call: PrepareQuestionCall;

  constructor(call: PrepareQuestionCall) {
    this._call = call;
  }

  get _marketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PrepareQuestionCall__Outputs {
  _call: PrepareQuestionCall;

  constructor(call: PrepareQuestionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RedeemPositionsCall extends ethereum.Call {
  get inputs(): RedeemPositionsCall__Inputs {
    return new RedeemPositionsCall__Inputs(this);
  }

  get outputs(): RedeemPositionsCall__Outputs {
    return new RedeemPositionsCall__Outputs(this);
  }
}

export class RedeemPositionsCall__Inputs {
  _call: RedeemPositionsCall;

  constructor(call: RedeemPositionsCall) {
    this._call = call;
  }

  get _conditionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RedeemPositionsCall__Outputs {
  _call: RedeemPositionsCall;

  constructor(call: RedeemPositionsCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall extends ethereum.Call {
  get inputs(): RenounceAdminCall__Inputs {
    return new RenounceAdminCall__Inputs(this);
  }

  get outputs(): RenounceAdminCall__Outputs {
    return new RenounceAdminCall__Outputs(this);
  }
}

export class RenounceAdminCall__Inputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class RenounceAdminCall__Outputs {
  _call: RenounceAdminCall;

  constructor(call: RenounceAdminCall) {
    this._call = call;
  }
}

export class ReportOutcomeCall extends ethereum.Call {
  get inputs(): ReportOutcomeCall__Inputs {
    return new ReportOutcomeCall__Inputs(this);
  }

  get outputs(): ReportOutcomeCall__Outputs {
    return new ReportOutcomeCall__Outputs(this);
  }
}

export class ReportOutcomeCall__Inputs {
  _call: ReportOutcomeCall;

  constructor(call: ReportOutcomeCall) {
    this._call = call;
  }

  get _questionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _outcome(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ReportOutcomeCall__Outputs {
  _call: ReportOutcomeCall;

  constructor(call: ReportOutcomeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SplitPositionCall extends ethereum.Call {
  get inputs(): SplitPositionCall__Inputs {
    return new SplitPositionCall__Inputs(this);
  }

  get outputs(): SplitPositionCall__Outputs {
    return new SplitPositionCall__Outputs(this);
  }
}

export class SplitPositionCall__Inputs {
  _call: SplitPositionCall;

  constructor(call: SplitPositionCall) {
    this._call = call;
  }

  get _collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _conditionId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SplitPositionCall__Outputs {
  _call: SplitPositionCall;

  constructor(call: SplitPositionCall) {
    this._call = call;
  }
}

export class SplitPosition1Call extends ethereum.Call {
  get inputs(): SplitPosition1Call__Inputs {
    return new SplitPosition1Call__Inputs(this);
  }

  get outputs(): SplitPosition1Call__Outputs {
    return new SplitPosition1Call__Outputs(this);
  }
}

export class SplitPosition1Call__Inputs {
  _call: SplitPosition1Call;

  constructor(call: SplitPosition1Call) {
    this._call = call;
  }

  get _conditionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SplitPosition1Call__Outputs {
  _call: SplitPosition1Call;

  constructor(call: SplitPosition1Call) {
    this._call = call;
  }
}
