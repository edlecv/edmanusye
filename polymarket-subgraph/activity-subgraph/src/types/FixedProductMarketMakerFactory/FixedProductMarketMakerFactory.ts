// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FixedProductMarketMakerCreation extends ethereum.Event {
  get params(): FixedProductMarketMakerCreation__Params {
    return new FixedProductMarketMakerCreation__Params(this);
  }
}

export class FixedProductMarketMakerCreation__Params {
  _event: FixedProductMarketMakerCreation;

  constructor(event: FixedProductMarketMakerCreation) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fixedProductMarketMaker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get conditionalTokens(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get conditionIds(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FPMMFundingAdded extends ethereum.Event {
  get params(): FPMMFundingAdded__Params {
    return new FPMMFundingAdded__Params(this);
  }
}

export class FPMMFundingAdded__Params {
  _event: FPMMFundingAdded;

  constructor(event: FPMMFundingAdded) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountsAdded(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get sharesMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FPMMFundingRemoved extends ethereum.Event {
  get params(): FPMMFundingRemoved__Params {
    return new FPMMFundingRemoved__Params(this);
  }
}

export class FPMMFundingRemoved__Params {
  _event: FPMMFundingRemoved;

  constructor(event: FPMMFundingRemoved) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountsRemoved(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get collateralRemovedFromFeePool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sharesBurnt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FPMMBuy extends ethereum.Event {
  get params(): FPMMBuy__Params {
    return new FPMMBuy__Params(this);
  }
}

export class FPMMBuy__Params {
  _event: FPMMBuy;

  constructor(event: FPMMBuy) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get investmentAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outcomeIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outcomeTokensBought(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FPMMSell extends ethereum.Event {
  get params(): FPMMSell__Params {
    return new FPMMSell__Params(this);
  }
}

export class FPMMSell__Params {
  _event: FPMMSell;

  constructor(event: FPMMSell) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get returnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get outcomeIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outcomeTokensSold(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CloneCreated extends ethereum.Event {
  get params(): CloneCreated__Params {
    return new CloneCreated__Params(this);
  }
}

export class CloneCreated__Params {
  _event: CloneCreated;

  constructor(event: CloneCreated) {
    this._event = event;
  }

  get target(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get clone(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FixedProductMarketMakerFactory extends ethereum.SmartContract {
  static bind(address: Address): FixedProductMarketMakerFactory {
    return new FixedProductMarketMakerFactory(
      "FixedProductMarketMakerFactory",
      address,
    );
  }

  implementationMaster(): Address {
    let result = super.call(
      "implementationMaster",
      "implementationMaster():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_implementationMaster(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementationMaster",
      "implementationMaster():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createFixedProductMarketMaker(
    conditionalTokens: Address,
    collateralToken: Address,
    conditionIds: Array<Bytes>,
    fee: BigInt,
  ): Address {
    let result = super.call(
      "createFixedProductMarketMaker",
      "createFixedProductMarketMaker(address,address,bytes32[],uint256):(address)",
      [
        ethereum.Value.fromAddress(conditionalTokens),
        ethereum.Value.fromAddress(collateralToken),
        ethereum.Value.fromFixedBytesArray(conditionIds),
        ethereum.Value.fromUnsignedBigInt(fee),
      ],
    );

    return result[0].toAddress();
  }

  try_createFixedProductMarketMaker(
    conditionalTokens: Address,
    collateralToken: Address,
    conditionIds: Array<Bytes>,
    fee: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createFixedProductMarketMaker",
      "createFixedProductMarketMaker(address,address,bytes32[],uint256):(address)",
      [
        ethereum.Value.fromAddress(conditionalTokens),
        ethereum.Value.fromAddress(collateralToken),
        ethereum.Value.fromFixedBytesArray(conditionIds),
        ethereum.Value.fromUnsignedBigInt(fee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloneConstructorCall extends ethereum.Call {
  get inputs(): CloneConstructorCall__Inputs {
    return new CloneConstructorCall__Inputs(this);
  }

  get outputs(): CloneConstructorCall__Outputs {
    return new CloneConstructorCall__Outputs(this);
  }
}

export class CloneConstructorCall__Inputs {
  _call: CloneConstructorCall;

  constructor(call: CloneConstructorCall) {
    this._call = call;
  }

  get consData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloneConstructorCall__Outputs {
  _call: CloneConstructorCall;

  constructor(call: CloneConstructorCall) {
    this._call = call;
  }
}

export class CreateFixedProductMarketMakerCall extends ethereum.Call {
  get inputs(): CreateFixedProductMarketMakerCall__Inputs {
    return new CreateFixedProductMarketMakerCall__Inputs(this);
  }

  get outputs(): CreateFixedProductMarketMakerCall__Outputs {
    return new CreateFixedProductMarketMakerCall__Outputs(this);
  }
}

export class CreateFixedProductMarketMakerCall__Inputs {
  _call: CreateFixedProductMarketMakerCall;

  constructor(call: CreateFixedProductMarketMakerCall) {
    this._call = call;
  }

  get conditionalTokens(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get conditionIds(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateFixedProductMarketMakerCall__Outputs {
  _call: CreateFixedProductMarketMakerCall;

  constructor(call: CreateFixedProductMarketMakerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
