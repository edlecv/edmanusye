// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CanRelayFailed extends ethereum.Event {
  get params(): CanRelayFailed__Params {
    return new CanRelayFailed__Params(this);
  }
}

export class CanRelayFailed__Params {
  _event: CanRelayFailed;

  constructor(event: CanRelayFailed) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get selector(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get reason(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Penalized extends ethereum.Event {
  get params(): Penalized__Params {
    return new Penalized__Params(this);
  }
}

export class Penalized__Params {
  _event: Penalized;

  constructor(event: Penalized) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RelayAdded extends ethereum.Event {
  get params(): RelayAdded__Params {
    return new RelayAdded__Params(this);
  }
}

export class RelayAdded__Params {
  _event: RelayAdded;

  constructor(event: RelayAdded) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get unstakeDelay(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get url(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class RelayRemoved extends ethereum.Event {
  get params(): RelayRemoved__Params {
    return new RelayRemoved__Params(this);
  }
}

export class RelayRemoved__Params {
  _event: RelayRemoved;

  constructor(event: RelayRemoved) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get unstakeTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unstakeDelay(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransactionRelayed extends ethereum.Event {
  get params(): TransactionRelayed__Params {
    return new TransactionRelayed__Params(this);
  }
}

export class TransactionRelayed__Params {
  _event: TransactionRelayed;

  constructor(event: TransactionRelayed) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get selector(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get status(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get charge(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get relay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RelayHub__canRelayResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getStatus(): BigInt {
    return this.value0;
  }

  getRecipientContext(): Bytes {
    return this.value1;
  }
}

export class RelayHub__getRelayResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)),
    );
    return map;
  }

  getTotalStake(): BigInt {
    return this.value0;
  }

  getUnstakeDelay(): BigInt {
    return this.value1;
  }

  getUnstakeTime(): BigInt {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getState(): i32 {
    return this.value4;
  }
}

export class RelayHub extends ethereum.SmartContract {
  static bind(address: Address): RelayHub {
    return new RelayHub("RelayHub", address);
  }

  balanceOf(target: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(target),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(target: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(target),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canRelay(
    relay: Address,
    from: Address,
    to: Address,
    encodedFunction: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    gasLimit: BigInt,
    nonce: BigInt,
    signature: Bytes,
    approvalData: Bytes,
  ): RelayHub__canRelayResult {
    let result = super.call(
      "canRelay",
      "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(relay),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBytes(encodedFunction),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(approvalData),
      ],
    );

    return new RelayHub__canRelayResult(
      result[0].toBigInt(),
      result[1].toBytes(),
    );
  }

  try_canRelay(
    relay: Address,
    from: Address,
    to: Address,
    encodedFunction: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    gasLimit: BigInt,
    nonce: BigInt,
    signature: Bytes,
    approvalData: Bytes,
  ): ethereum.CallResult<RelayHub__canRelayResult> {
    let result = super.tryCall(
      "canRelay",
      "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(relay),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBytes(encodedFunction),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(approvalData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RelayHub__canRelayResult(value[0].toBigInt(), value[1].toBytes()),
    );
  }

  getNonce(from: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(from),
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(from),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRelay(relay: Address): RelayHub__getRelayResult {
    let result = super.call(
      "getRelay",
      "getRelay(address):(uint256,uint256,uint256,address,uint8)",
      [ethereum.Value.fromAddress(relay)],
    );

    return new RelayHub__getRelayResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toI32(),
    );
  }

  try_getRelay(relay: Address): ethereum.CallResult<RelayHub__getRelayResult> {
    let result = super.tryCall(
      "getRelay",
      "getRelay(address):(uint256,uint256,uint256,address,uint8)",
      [ethereum.Value.fromAddress(relay)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RelayHub__getRelayResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toI32(),
      ),
    );
  }

  maxPossibleCharge(
    relayedCallStipend: BigInt,
    gasPrice: BigInt,
    transactionFee: BigInt,
  ): BigInt {
    let result = super.call(
      "maxPossibleCharge",
      "maxPossibleCharge(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(relayedCallStipend),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
      ],
    );

    return result[0].toBigInt();
  }

  try_maxPossibleCharge(
    relayedCallStipend: BigInt,
    gasPrice: BigInt,
    transactionFee: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPossibleCharge",
      "maxPossibleCharge(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(relayedCallStipend),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requiredGas(relayedCallStipend: BigInt): BigInt {
    let result = super.call("requiredGas", "requiredGas(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(relayedCallStipend),
    ]);

    return result[0].toBigInt();
  }

  try_requiredGas(relayedCallStipend: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredGas",
      "requiredGas(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(relayedCallStipend)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class PenalizeIllegalTransactionCall extends ethereum.Call {
  get inputs(): PenalizeIllegalTransactionCall__Inputs {
    return new PenalizeIllegalTransactionCall__Inputs(this);
  }

  get outputs(): PenalizeIllegalTransactionCall__Outputs {
    return new PenalizeIllegalTransactionCall__Outputs(this);
  }
}

export class PenalizeIllegalTransactionCall__Inputs {
  _call: PenalizeIllegalTransactionCall;

  constructor(call: PenalizeIllegalTransactionCall) {
    this._call = call;
  }

  get unsignedTx(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PenalizeIllegalTransactionCall__Outputs {
  _call: PenalizeIllegalTransactionCall;

  constructor(call: PenalizeIllegalTransactionCall) {
    this._call = call;
  }
}

export class PenalizeRepeatedNonceCall extends ethereum.Call {
  get inputs(): PenalizeRepeatedNonceCall__Inputs {
    return new PenalizeRepeatedNonceCall__Inputs(this);
  }

  get outputs(): PenalizeRepeatedNonceCall__Outputs {
    return new PenalizeRepeatedNonceCall__Outputs(this);
  }
}

export class PenalizeRepeatedNonceCall__Inputs {
  _call: PenalizeRepeatedNonceCall;

  constructor(call: PenalizeRepeatedNonceCall) {
    this._call = call;
  }

  get unsignedTx1(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get signature1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get unsignedTx2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signature2(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PenalizeRepeatedNonceCall__Outputs {
  _call: PenalizeRepeatedNonceCall;

  constructor(call: PenalizeRepeatedNonceCall) {
    this._call = call;
  }
}

export class RegisterRelayCall extends ethereum.Call {
  get inputs(): RegisterRelayCall__Inputs {
    return new RegisterRelayCall__Inputs(this);
  }

  get outputs(): RegisterRelayCall__Outputs {
    return new RegisterRelayCall__Outputs(this);
  }
}

export class RegisterRelayCall__Inputs {
  _call: RegisterRelayCall;

  constructor(call: RegisterRelayCall) {
    this._call = call;
  }

  get transactionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get url(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterRelayCall__Outputs {
  _call: RegisterRelayCall;

  constructor(call: RegisterRelayCall) {
    this._call = call;
  }
}

export class RelayCallCall extends ethereum.Call {
  get inputs(): RelayCallCall__Inputs {
    return new RelayCallCall__Inputs(this);
  }

  get outputs(): RelayCallCall__Outputs {
    return new RelayCallCall__Outputs(this);
  }
}

export class RelayCallCall__Inputs {
  _call: RelayCallCall;

  constructor(call: RelayCallCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get encodedFunction(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get transactionFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gasPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get approvalData(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class RelayCallCall__Outputs {
  _call: RelayCallCall;

  constructor(call: RelayCallCall) {
    this._call = call;
  }
}

export class RemoveRelayByOwnerCall extends ethereum.Call {
  get inputs(): RemoveRelayByOwnerCall__Inputs {
    return new RemoveRelayByOwnerCall__Inputs(this);
  }

  get outputs(): RemoveRelayByOwnerCall__Outputs {
    return new RemoveRelayByOwnerCall__Outputs(this);
  }
}

export class RemoveRelayByOwnerCall__Inputs {
  _call: RemoveRelayByOwnerCall;

  constructor(call: RemoveRelayByOwnerCall) {
    this._call = call;
  }

  get relay(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRelayByOwnerCall__Outputs {
  _call: RemoveRelayByOwnerCall;

  constructor(call: RemoveRelayByOwnerCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get relayaddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get unstakeDelay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get relay(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dest(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
