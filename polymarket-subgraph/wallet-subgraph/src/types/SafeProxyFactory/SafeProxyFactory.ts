// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ProxyCreation extends ethereum.Event {
  get params(): ProxyCreation__Params {
    return new ProxyCreation__Params(this);
  }
}

export class ProxyCreation__Params {
  _event: ProxyCreation;

  constructor(event: ProxyCreation) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SafeProxyFactory extends ethereum.SmartContract {
  static bind(address: Address): SafeProxyFactory {
    return new SafeProxyFactory("SafeProxyFactory", address);
  }

  CREATE_PROXY_TYPEHASH(): Bytes {
    let result = super.call(
      "CREATE_PROXY_TYPEHASH",
      "CREATE_PROXY_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CREATE_PROXY_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CREATE_PROXY_TYPEHASH",
      "CREATE_PROXY_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  computeProxyAddress(user: Address): Address {
    let result = super.call(
      "computeProxyAddress",
      "computeProxyAddress(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toAddress();
  }

  try_computeProxyAddress(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeProxyAddress",
      "computeProxyAddress(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fallbackHandler(): Address {
    let result = super.call(
      "fallbackHandler",
      "fallbackHandler():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_fallbackHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fallbackHandler",
      "fallbackHandler():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractBytecode(): Bytes {
    let result = super.call(
      "getContractBytecode",
      "getContractBytecode():(bytes)",
      [],
    );

    return result[0].toBytes();
  }

  try_getContractBytecode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getContractBytecode",
      "getContractBytecode():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSalt(user: Address): Bytes {
    let result = super.call("getSalt", "getSalt(address):(bytes32)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBytes();
  }

  try_getSalt(user: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getSalt", "getSalt(address):(bytes32)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  masterCopy(): Address {
    let result = super.call("masterCopy", "masterCopy():(address)", []);

    return result[0].toAddress();
  }

  try_masterCopy(): ethereum.CallResult<Address> {
    let result = super.tryCall("masterCopy", "masterCopy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyCreationCode(): Bytes {
    let result = super.call(
      "proxyCreationCode",
      "proxyCreationCode():(bytes)",
      [],
    );

    return result[0].toBytes();
  }

  try_proxyCreationCode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxyCreationCode",
      "proxyCreationCode():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _masterCopy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fallbackHandler(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateProxyCall extends ethereum.Call {
  get inputs(): CreateProxyCall__Inputs {
    return new CreateProxyCall__Inputs(this);
  }

  get outputs(): CreateProxyCall__Outputs {
    return new CreateProxyCall__Outputs(this);
  }
}

export class CreateProxyCall__Inputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }

  get paymentToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get paymentReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createSig(): CreateProxyCallCreateSigStruct {
    return changetype<CreateProxyCallCreateSigStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }
}

export class CreateProxyCall__Outputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }
}

export class CreateProxyCallCreateSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}
