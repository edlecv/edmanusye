{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/.nvm/versions/node/v22.13.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend,ResponsiveContainer}from'recharts';import{Button}from\"./ui/button\";// Assuming button.jsx exists in ui folder\nimport{Input}from\"./ui/input\";// Assuming input.jsx exists in ui folder\nimport{Card,CardContent,CardHeader,CardTitle}from\"./ui/card\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StrategyAnalyzer=()=>{const initialConfig={initialBalance:1000,winRate:0.55,riskRatio:1,rounds:1000,baseBet:10,// Corresponds to baseBet in original JS\nrawBaseBet:10,// Corresponds to rawBaseBet in original JS\nmaxBetPercent:100,maxBetSize:1000,consecutiveLossesForDouble:3,consecutiveWinsForDouble:3};const[config,setConfig]=useState(initialConfig);const[simulationResults,setSimulationResults]=useState(null);const[chartData,setChartData]=useState([]);const[expectancy,setExpectancy]=useState(0);const chartRef=useRef(null);useEffect(()=>{const winRate=parseFloat(config.winRate);const riskRatio=parseFloat(config.riskRatio);const calculatedExpectancy=winRate*riskRatio-(1-winRate);setExpectancy(calculatedExpectancy);},[config.winRate,config.riskRatio]);const handleInputChange=e=>{const{name,value,type}=e.target;setConfig(prevConfig=>_objectSpread(_objectSpread({},prevConfig),{},{[name]:type==='number'?parseFloat(value):value}));};// --- Simulation Logic (adapted from simulator.js) ---\nconst runSingleStrategy=(currentConfig,strategyType)=>{let balance=currentConfig.initialBalance;let currentBetValue=currentConfig.baseBet;if(strategyType==='raw'){currentBetValue=currentConfig.rawBaseBet;// Use rawBaseBet for raw strategy\n}let consecutiveWinLoss=0;// Used for L_cd and W_cd\nconst history=[];let maxDrawdown=0;let peakBalance=currentConfig.initialBalance;let wins=0;let losses=0;let maxBetUsed=0;for(let i=0;i<currentConfig.rounds;i++){if(balance<=0)break;// Stop if ruined\nlet actualBet=currentBetValue;if(strategyType!=='raw'){// Raw strategy has fixed bet, others are subject to caps\nactualBet=Math.min(currentBetValue,balance*(currentConfig.maxBetPercent/100),currentConfig.maxBetSize);if(balance<actualBet)actualBet=balance;// Cannot bet more than current balance\n}if(actualBet<=0)actualBet=1;// Minimum bet if calculated bet is 0 or less\nmaxBetUsed=Math.max(maxBetUsed,actualBet);const isWin=Math.random()<currentConfig.winRate;if(isWin){balance+=actualBet*currentConfig.riskRatio;wins++;if(strategyType==='martingale'||strategyType==='linear'||strategyType==='smartDouble'){consecutiveWinLoss=0;// Reset loss counter\ncurrentBetValue=currentConfig.baseBet;// Reset bet for these strategies on win\n}if(strategyType==='antiMartingale')currentBetValue*=2;if(strategyType==='antiLinear')currentBetValue+=currentConfig.baseBet;if(strategyType==='antiSmartDouble'){consecutiveWinLoss++;if(consecutiveWinLoss>=currentConfig.consecutiveWinsForDouble){currentBetValue=currentConfig.baseBet*2;// consecutiveWinLoss = 0; // Reset after doubling in original code, but might be better to keep it to continue doubling if streak persists\n}else{currentBetValue=currentConfig.baseBet;// if not enough wins to double, reset to base or keep current?\n// Original JS code implies it resets to baseBet if not doubling\n}}}else{balance-=actualBet;losses++;if(strategyType==='antiMartingale'||strategyType==='antiLinear'||strategyType==='antiSmartDouble'){consecutiveWinLoss=0;// Reset win counter\ncurrentBetValue=currentConfig.baseBet;// Reset bet for these strategies on loss\n}if(strategyType==='martingale')currentBetValue*=2;if(strategyType==='linear')currentBetValue+=currentConfig.baseBet;if(strategyType==='smartDouble'){consecutiveWinLoss++;if(consecutiveWinLoss>=currentConfig.consecutiveLossesForDouble){currentBetValue=currentConfig.baseBet*2;// consecutiveWinLoss = 0;\n}else{currentBetValue=currentConfig.baseBet;}}}// Ensure bet does not exceed new balance for next round if capped by balance percentage\nif(strategyType!=='raw'){currentBetValue=Math.max(1,currentBetValue);// Ensure bet is at least 1\n}peakBalance=Math.max(peakBalance,balance);const drawdown=peakBalance-balance;maxDrawdown=Math.max(maxDrawdown,drawdown);history.push({round:i+1,balance});}return{history,finalBalance:balance,maxDrawdown,wins,losses,tradesCount:wins+losses,maxBetUsed};};const runSimulations=()=>{const strategies=[{name:'Raw',type:'raw',color:'#10b981'},{name:'Martingale',type:'martingale',color:'#9333ea'},{name:'Anti-Martingale',type:'antiMartingale',color:'#2563eb'},{name:'Linear',type:'linear',color:'#eab308'},{name:'Anti-Linear',type:'antiLinear',color:'#dc2626'},{name:'Smart Double',type:'smartDouble',color:'#ff6b00'},{name:'Anti-Smart Double',type:'antiSmartDouble',color:'#FF1493'}];let allResults={};let tempChartData=[];strategies.forEach(strategy=>{const result=runSingleStrategy(config,strategy.type);allResults[strategy.type]=_objectSpread(_objectSpread({},result),{},{name:strategy.name,color:strategy.color});});// Prepare chart data - assuming all histories have same length or take min length\nconst numRounds=config.rounds;for(let i=0;i<numRounds;i++){let roundData={round:i+1};let active=false;strategies.forEach(strategy=>{if(allResults[strategy.type].history[i]){roundData[strategy.type]=allResults[strategy.type].history[i].balance;active=true;}else{// If strategy ended early, carry forward last balance or show null\nconst lastHistoryEntry=allResults[strategy.type].history[allResults[strategy.type].history.length-1];roundData[strategy.type]=lastHistoryEntry?lastHistoryEntry.balance:null;}});if(active)tempChartData.push(roundData);else break;// Stop if no strategy has data for this round\n}// Sample data for chart performance if too many rounds\nconst sampleRate=Math.max(1,Math.floor(tempChartData.length/500));// Max 500 points\nconst sampledChartData=tempChartData.filter((_,i)=>i%sampleRate===0);setChartData(sampledChartData);setSimulationResults(allResults);};const formatNumber=function(num){let digits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;if(typeof num!=='number'||isNaN(num))return'N/A';return num.toLocaleString(undefined,{minimumFractionDigits:digits,maximumFractionDigits:digits});};return/*#__PURE__*/_jsxs(Card,{className:\"mb-6\",children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsx(CardTitle,{children:\"Interactive Strategy Simulator\"})}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\",children:Object.keys(initialConfig).map(key=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col space-y-1\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:key,className:\"text-sm font-medium\",children:key.replace(/([A-Z])/g,' $1').replace(/^./,str=>str.toUpperCase())}),/*#__PURE__*/_jsx(Input,{type:\"number\",name:key,id:key,value:config[key],onChange:handleInputChange,step:key==='winRate'||key==='riskRatio'?0.01:1,min:key==='winRate'?0:key==='riskRatio'?0.1:0,max:key==='winRate'?1:undefined})]},key))}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Expectancy: \"}),/*#__PURE__*/_jsxs(\"span\",{className:expectancy>0?'text-green-600':'text-red-600',children:[expectancy.toFixed(3),\" per $1 bet\"]})]}),/*#__PURE__*/_jsx(Button,{onClick:runSimulations,className:\"mb-6 w-full md:w-auto\",children:\"Run Simulation\"}),simulationResults&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Simulation Results\"}),/*#__PURE__*/_jsx(\"div\",{className:\"h-[400px] mb-6\",children:/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(LineChart,{data:chartData,ref:chartRef,children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"round\"}),/*#__PURE__*/_jsx(YAxis,{tickFormatter:value=>\"$\".concat(formatNumber(value,0))}),/*#__PURE__*/_jsx(Tooltip,{formatter:(value,name)=>[\"$\".concat(formatNumber(value)),name.replace(/([A-Z])/g,' $1').replace(/^./,str=>str.toUpperCase())]}),/*#__PURE__*/_jsx(Legend,{}),Object.values(simulationResults).map(res=>/*#__PURE__*/_jsx(Line,{type:\"monotone\",dataKey:res.type,name:res.name,stroke:res.color,dot:false},res.name))]})})}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",children:Object.values(simulationResults).sort((a,b)=>b.finalBalance/(b.maxDrawdown||1)-a.finalBalance/(a.maxDrawdown||1)).map(res=>/*#__PURE__*/_jsxs(Card,{style:{borderColor:res.color},children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsx(CardTitle,{style:{color:res.color},children:res.name})}),/*#__PURE__*/_jsxs(CardContent,{className:\"text-sm space-y-1\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Final Balance: \",/*#__PURE__*/_jsxs(\"strong\",{className:res.finalBalance>config.initialBalance?'text-green-600':'text-red-600',children:[\"$\",formatNumber(res.finalBalance)]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total Return: \",/*#__PURE__*/_jsxs(\"strong\",{className:res.finalBalance>config.initialBalance?'text-green-600':'text-red-600',children:[((res.finalBalance/config.initialBalance-1)*100).toFixed(2),\"%\"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Max Drawdown: \",/*#__PURE__*/_jsxs(\"strong\",{className:\"text-red-600\",children:[\"$\",formatNumber(res.maxDrawdown)]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Return/Drawdown: \",/*#__PURE__*/_jsx(\"strong\",{children:formatNumber(res.finalBalance/(res.maxDrawdown||1))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Trades: \",res.tradesCount,\" (W: \",res.wins,\", L: \",res.losses,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Win Rate (Actual): \",res.tradesCount>0?formatNumber(res.wins/res.tradesCount*100,1)+'%':'N/A']}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Largest Bet: $\",formatNumber(res.maxBetUsed)]})]})]},res.name))})]})]})]});};export default StrategyAnalyzer;","map":{"version":3,"names":["React","useState","useEffect","useRef","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Button","Input","Card","CardContent","CardHeader","CardTitle","jsx","_jsx","jsxs","_jsxs","StrategyAnalyzer","initialConfig","initialBalance","winRate","riskRatio","rounds","baseBet","rawBaseBet","maxBetPercent","maxBetSize","consecutiveLossesForDouble","consecutiveWinsForDouble","config","setConfig","simulationResults","setSimulationResults","chartData","setChartData","expectancy","setExpectancy","chartRef","parseFloat","calculatedExpectancy","handleInputChange","e","name","value","type","target","prevConfig","_objectSpread","runSingleStrategy","currentConfig","strategyType","balance","currentBetValue","consecutiveWinLoss","history","maxDrawdown","peakBalance","wins","losses","maxBetUsed","i","actualBet","Math","min","max","isWin","random","drawdown","push","round","finalBalance","tradesCount","runSimulations","strategies","color","allResults","tempChartData","forEach","strategy","result","numRounds","roundData","active","lastHistoryEntry","length","sampleRate","floor","sampledChartData","filter","_","formatNumber","num","digits","arguments","undefined","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","className","children","Object","keys","map","key","htmlFor","replace","str","toUpperCase","id","onChange","step","toFixed","onClick","width","height","data","ref","strokeDasharray","dataKey","tickFormatter","concat","formatter","values","res","stroke","dot","sort","a","b","style","borderColor"],"sources":["/home/ubuntu/strategy-simulator/src/components/StrategyAnalyzer.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Button } from \"./ui/button\"; // Assuming button.jsx exists in ui folder\nimport { Input } from \"./ui/input\";   // Assuming input.jsx exists in ui folder\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\n\nconst StrategyAnalyzer = () => {\n  const initialConfig = {\n    initialBalance: 1000,\n    winRate: 0.55,\n    riskRatio: 1,\n    rounds: 1000,\n    baseBet: 10, // Corresponds to baseBet in original JS\n    rawBaseBet: 10, // Corresponds to rawBaseBet in original JS\n    maxBetPercent: 100,\n    maxBetSize: 1000,\n    consecutiveLossesForDouble: 3,\n    consecutiveWinsForDouble: 3,\n  };\n\n  const [config, setConfig] = useState(initialConfig);\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [expectancy, setExpectancy] = useState(0);\n\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const winRate = parseFloat(config.winRate);\n    const riskRatio = parseFloat(config.riskRatio);\n    const calculatedExpectancy = (winRate * riskRatio) - (1 - winRate);\n    setExpectancy(calculatedExpectancy);\n  }, [config.winRate, config.riskRatio]);\n\n  const handleInputChange = (e) => {\n    const { name, value, type } = e.target;\n    setConfig(prevConfig => ({\n      ...prevConfig,\n      [name]: type === 'number' ? parseFloat(value) : value,\n    }));\n  };\n\n  // --- Simulation Logic (adapted from simulator.js) ---\n  const runSingleStrategy = (currentConfig, strategyType) => {\n    let balance = currentConfig.initialBalance;\n    let currentBetValue = currentConfig.baseBet;\n    if (strategyType === 'raw') {\n        currentBetValue = currentConfig.rawBaseBet; // Use rawBaseBet for raw strategy\n    }\n\n    let consecutiveWinLoss = 0; // Used for L_cd and W_cd\n    const history = [];\n    let maxDrawdown = 0;\n    let peakBalance = currentConfig.initialBalance;\n    let wins = 0;\n    let losses = 0;\n    let maxBetUsed = 0;\n\n    for (let i = 0; i < currentConfig.rounds; i++) {\n      if (balance <= 0) break; // Stop if ruined\n      \n      let actualBet = currentBetValue;\n      if (strategyType !== 'raw') { // Raw strategy has fixed bet, others are subject to caps\n        actualBet = Math.min(\n            currentBetValue, \n            balance * (currentConfig.maxBetPercent / 100), \n            currentConfig.maxBetSize\n        );\n        if (balance < actualBet) actualBet = balance; // Cannot bet more than current balance\n      }\n      if (actualBet <=0) actualBet = 1; // Minimum bet if calculated bet is 0 or less\n      maxBetUsed = Math.max(maxBetUsed, actualBet);\n\n      const isWin = Math.random() < currentConfig.winRate;\n\n      if (isWin) {\n        balance += actualBet * currentConfig.riskRatio;\n        wins++;\n        if (strategyType === 'martingale' || strategyType === 'linear' || strategyType === 'smartDouble') {\n          consecutiveWinLoss = 0; // Reset loss counter\n          currentBetValue = currentConfig.baseBet; // Reset bet for these strategies on win\n        }\n        if (strategyType === 'antiMartingale') currentBetValue *= 2;\n        if (strategyType === 'antiLinear') currentBetValue += currentConfig.baseBet;\n        if (strategyType === 'antiSmartDouble') {\n          consecutiveWinLoss++;\n          if (consecutiveWinLoss >= currentConfig.consecutiveWinsForDouble) {\n            currentBetValue = currentConfig.baseBet * 2;\n            // consecutiveWinLoss = 0; // Reset after doubling in original code, but might be better to keep it to continue doubling if streak persists\n          } else {\n            currentBetValue = currentConfig.baseBet; // if not enough wins to double, reset to base or keep current?\n                                                  // Original JS code implies it resets to baseBet if not doubling\n          }\n        }\n      } else {\n        balance -= actualBet;\n        losses++;\n        if (strategyType === 'antiMartingale' || strategyType === 'antiLinear' || strategyType === 'antiSmartDouble') {\n          consecutiveWinLoss = 0; // Reset win counter\n          currentBetValue = currentConfig.baseBet; // Reset bet for these strategies on loss\n        }\n        if (strategyType === 'martingale') currentBetValue *= 2;\n        if (strategyType === 'linear') currentBetValue += currentConfig.baseBet;\n        if (strategyType === 'smartDouble') {\n          consecutiveWinLoss++;\n          if (consecutiveWinLoss >= currentConfig.consecutiveLossesForDouble) {\n            currentBetValue = currentConfig.baseBet * 2;\n            // consecutiveWinLoss = 0;\n          } else {\n            currentBetValue = currentConfig.baseBet;\n          }\n        }\n      }\n      \n      // Ensure bet does not exceed new balance for next round if capped by balance percentage\n      if (strategyType !== 'raw') {\n         currentBetValue = Math.max(1, currentBetValue); // Ensure bet is at least 1\n      }\n\n      peakBalance = Math.max(peakBalance, balance);\n      const drawdown = peakBalance - balance;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n      history.push({ round: i + 1, balance });\n    }\n    return { history, finalBalance: balance, maxDrawdown, wins, losses, tradesCount: wins + losses, maxBetUsed };\n  };\n\n  const runSimulations = () => {\n    const strategies = [\n      { name: 'Raw', type: 'raw', color: '#10b981' },\n      { name: 'Martingale', type: 'martingale', color: '#9333ea' },\n      { name: 'Anti-Martingale', type: 'antiMartingale', color: '#2563eb' },\n      { name: 'Linear', type: 'linear', color: '#eab308' },\n      { name: 'Anti-Linear', type: 'antiLinear', color: '#dc2626' },\n      { name: 'Smart Double', type: 'smartDouble', color: '#ff6b00' },\n      { name: 'Anti-Smart Double', type: 'antiSmartDouble', color: '#FF1493' },\n    ];\n\n    let allResults = {};\n    let tempChartData = [];\n\n    strategies.forEach(strategy => {\n      const result = runSingleStrategy(config, strategy.type);\n      allResults[strategy.type] = { ...result, name: strategy.name, color: strategy.color };\n    });\n\n    // Prepare chart data - assuming all histories have same length or take min length\n    const numRounds = config.rounds;\n    for (let i = 0; i < numRounds; i++) {\n      let roundData = { round: i + 1 };\n      let active = false;\n      strategies.forEach(strategy => {\n        if (allResults[strategy.type].history[i]) {\n          roundData[strategy.type] = allResults[strategy.type].history[i].balance;\n          active = true;\n        } else {\n          // If strategy ended early, carry forward last balance or show null\n          const lastHistoryEntry = allResults[strategy.type].history[allResults[strategy.type].history.length -1];\n          roundData[strategy.type] = lastHistoryEntry ? lastHistoryEntry.balance : null;\n        }\n      });\n      if(active) tempChartData.push(roundData);\n      else break; // Stop if no strategy has data for this round\n    }\n    \n    // Sample data for chart performance if too many rounds\n    const sampleRate = Math.max(1, Math.floor(tempChartData.length / 500)); // Max 500 points\n    const sampledChartData = tempChartData.filter((_, i) => i % sampleRate === 0);\n\n    setChartData(sampledChartData);\n    setSimulationResults(allResults);\n  };\n  \n  const formatNumber = (num, digits = 2) => {\n    if (typeof num !== 'number' || isNaN(num)) return 'N/A';\n    return num.toLocaleString(undefined, { minimumFractionDigits: digits, maximumFractionDigits: digits });\n  }\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle>Interactive Strategy Simulator</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n          {Object.keys(initialConfig).map(key => (\n            <div key={key} className=\"flex flex-col space-y-1\">\n              <label htmlFor={key} className=\"text-sm font-medium\">{key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</label>\n              <Input\n                type=\"number\"\n                name={key}\n                id={key}\n                value={config[key]}\n                onChange={handleInputChange}\n                step={key === 'winRate' || key === 'riskRatio' ? 0.01 : 1}\n                min={key === 'winRate' ? 0 : (key === 'riskRatio' ? 0.1 : 0)}\n                max={key === 'winRate' ? 1 : undefined}\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"mb-4\">\n          <strong>Expectancy: </strong>\n          <span className={expectancy > 0 ? 'text-green-600' : 'text-red-600'}>\n            {expectancy.toFixed(3)} per $1 bet\n          </span>\n        </div>\n        <Button onClick={runSimulations} className=\"mb-6 w-full md:w-auto\">Run Simulation</Button>\n\n        {simulationResults && (\n          <div className=\"mt-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">Simulation Results</h3>\n            <div className=\"h-[400px] mb-6\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={chartData} ref={chartRef}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"round\" />\n                  <YAxis tickFormatter={(value) => `$${formatNumber(value,0)}`} />\n                  <Tooltip formatter={(value, name) => [`$${formatNumber(value)}`, name.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())]} />\n                  <Legend />\n                  {Object.values(simulationResults).map(res => (\n                    <Line key={res.name} type=\"monotone\" dataKey={res.type} name={res.name} stroke={res.color} dot={false} />\n                  ))}\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {Object.values(simulationResults).sort((a,b) => (b.finalBalance / (b.maxDrawdown || 1)) - (a.finalBalance / (a.maxDrawdown || 1))).map(res => (\n                <Card key={res.name} style={{ borderColor: res.color }}>\n                  <CardHeader>\n                    <CardTitle style={{ color: res.color }}>{res.name}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-sm space-y-1\">\n                    <p>Final Balance: <strong className={res.finalBalance > config.initialBalance ? 'text-green-600' : 'text-red-600'}>${formatNumber(res.finalBalance)}</strong></p>\n                    <p>Total Return: <strong className={res.finalBalance > config.initialBalance ? 'text-green-600' : 'text-red-600'}>{((res.finalBalance / config.initialBalance - 1) * 100).toFixed(2)}%</strong></p>\n                    <p>Max Drawdown: <strong className=\"text-red-600\">${formatNumber(res.maxDrawdown)}</strong></p>\n                    <p>Return/Drawdown: <strong>{formatNumber(res.finalBalance / (res.maxDrawdown || 1))}</strong></p>\n                    <p>Trades: {res.tradesCount} (W: {res.wins}, L: {res.losses})</p>\n                    <p>Win Rate (Actual): {res.tradesCount > 0 ? formatNumber((res.wins / res.tradesCount) * 100, 1) + '%' : 'N/A'}</p>\n                    <p>Largest Bet: ${formatNumber(res.maxBetUsed)}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StrategyAnalyzer;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}