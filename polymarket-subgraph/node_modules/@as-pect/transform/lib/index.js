import { Transform } from "assemblyscript/dist/transform.js";
import { createStrictEqualsMember } from "./createStrictEqualsMember.js";
import { createAddReflectedValueKeyValuePairsMember } from "./createAddReflectedValueKeyValuePairsMember.js";
// @ts-ignore
export default class AspectTransform extends Transform {
    /**
     * This method results in a pure AST transform that inserts a strictEquals member
     * into each ClassDeclaration.
     *
     * @param {Parser} parser - The AssemblyScript parser.
     */
    // @ts-ignore
    afterParse(parser) {
        // For backwards compatibility
        let sources = parser.program ? parser.program.sources : parser.sources;
        // for each program source
        for (const source of sources) {
            traverseStatements(source.statements);
        }
    }
}
function traverseStatements(statements) {
    // for each statement in the source
    for (const statement of statements) {
        // find each class declaration
        if (statement.kind === 51 /* NodeKind.ClassDeclaration */) {
            // cast and create a strictEquals function
            const classDeclaration = statement;
            classDeclaration.members.push(createStrictEqualsMember(classDeclaration));
            classDeclaration.members.push(createAddReflectedValueKeyValuePairsMember(classDeclaration));
        }
        else if (statement.kind === 59 /* NodeKind.NamespaceDeclaration */) {
            const namespaceDeclaration = statement;
            traverseStatements(namespaceDeclaration.members);
        }
    }
}
